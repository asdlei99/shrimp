<shrimp name="new_scene">
	<about/>
	<network>
		<block id="Add" position_x="4" position_y="3" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="OrenNayar" output="Ci"/>
			</input>
			<input name="B" type="color" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="CookTorrance" output="Ci"/>
			</input>
			<output name="val" type="color" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
				</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.			</usage>
		</block>
		<block id="Add_2" position_x="6" position_y="3" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Add" output="val"/>
			</input>
			<input name="B" type="color" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="Environment" output="val"/>
			</input>
			<output name="val" type="color" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
				</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.			</usage>
		</block>
		<block id="CookTorrance" position_x="0" position_y="2" author="rconstruct">
			<input name="Cspec" type="color" storage="varying" value="color(1)" description="Specular color"/>
			<input name="Ks" type="float" storage="varying" value="1.0" description="Specular light coefficient"/>
			<input name="roughness" type="float" storage="varying" value="0.2" description="The apparent surface roughness."/>
			<input name="dist" type="float" storage="uniform" value="0" description="Microfacet distributions, see help."/>
			<input name="geo" type="float" storage="uniform" value="0" description="Geometric attenuation, see help."/>
			<input name="ior" type="float" storage="varying" value="2" description="Index of refraction"/>
			<input name="k" type="float" storage="varying" value="2" description="Extinction coefficient"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="I" type="vector" storage="varying" value="I" description="Direction of viewer"/>
			<input name="Dir" type="vector" storage="varying" value="dPdv" description="Anisotropy direction"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
		aov_specularcolor += $(Cspec);
		aov_specular += $(Ks) * cooktorrance( $(N), $(I), $(Dir),
						$(ior), $(k), $(roughness), $(dist), $(geo) );
		$(Ci) = aov_specularcolor * aov_specular;
				</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h			</rsl_include>
			<usage>Cook-Torrance specular term. The &quot;dist&quot; variable controls the microfacet distribution function being used, being 0 = Beckmann (default), 1 = Ward, 2 = Trowbridge-Reitz, 3 = Heidrich-Seidel (anisotropic). The &quot;geo&quot; variable controls the geometric attenuation function being used, being 0 = Cook-Torrance (default), 1 = Smith, 2 = He-Torrance. In the case of the Heidrich-Seidel anisotropic distribution, some literature mentions adding an isotropic specular term, which is added here via &quot;specularbrdf&quot;, but the user might want to override this in the respective header. The specular color value is passed to &quot;aov_specularcolor&quot;, while the specular value is passed to the &quot;aov_specular&quot; AOV presets. The Fresnel term used is the complex Fresnel function, from the Odforce.net Odwiki, courtesy of Mario Marengo and the Odforce community, using the &quot;ior&quot; index of refraction, and the &quot;k&quot; extinction coefficient.			</usage>
		</block>
		<block id="Environment" position_x="4" position_y="1" author="rconstruct">
			<input name="texname" type="string" storage="uniform" value="&quot;raytrace&quot;" description="Texture map name"/>
			<input name="Kr" type="float" storage="varying" value="1" description="Environment intensity">
				<connection parent="Schlick_Fresnel" output="Kr"/>
			</input>
			<input name="dir" type="vector" storage="varying" value="reflect( I, normalize(N))" description="Direction vector">
				<connection parent="Reflect" output="R"/>
			</input>
			<input name="sblur" type="float" storage="varying" value="0" description="Blur along S"/>
			<input name="tblur" type="float" storage="varying" value="0" description="Blur along T"/>
			<input name="swidth" type="float" storage="uniform" value="1" description="Blur filter width along S"/>
			<input name="twidth" type="float" storage="uniform" value="1" description="Blur filter width along T"/>
			<input name="samples" type="float" storage="uniform" value="4" description="Sampling rate"/>
			<input name="fill" type="float" storage="uniform" value="0" description="Fill value on empty channel"/>
			<input name="filter" type="string" storage="uniform" value="&quot;gaussian&quot;" description="Filter type"/>
			<input name="channel" type="float" storage="varying" value="0" description="Channel, in color textures"/>
			<input name="tint" type="color" storage="varying" value="color(1)" description="Color tint for the environment"/>
			<input name="label" type="string" storage="uniform" value="&quot;&quot;" description="Ray label"/>
			<input name="subset" type="string" storage="uniform" value="&quot;&quot;" description="Ray subset"/>
			<input name="bias" type="float" storage="uniform" value="-1" description="Ray bias"/>
			<input name="hitmode" type="string" storage="uniform" value="&quot;default&quot;" description="Override hitmode"/>
			<input name="maxdist" type="float" storage="varying" value="1e38" description="Maximum ray distance"/>
			<input name="coneangle" type="float" storage="varying" value="radians(5)" description="Cone angle"/>
			<output name="val" type="color" storage="varying" description="Output color"/>
			<rsl_code>

	/* make sure options are clear */
	/* and set them according to shadeop and renderer */
	#ifdef SHADEOP_ARGUMENTS
	#undef SHADEOP_ARGUMENTS
	#endif
	
    #if RENDERER == pixie
	#define SHADEOP_ARGUMENTS	&quot;filter&quot;, $(filter), \
								/* can&apos;t specify s/tblur */ \
								&quot;blur&quot;, $(sblur), \
								&quot;swidth&quot;, $(swidth), &quot;twidth&quot;, $(twidth), \
								&quot;fill&quot;, $(fill), &quot;samples&quot;, $(samples), \
								&quot;bias&quot;, $(bias), &quot;maxdist&quot;, $(maxdist), \
								&quot;samplecone&quot;, $(coneangle), &quot;label&quot;, $(label)
	#elif RENDERER == _3delight
	#define SHADEOP_ARGUMENTS	&quot;sblur&quot;, $(sblur), &quot;tblur&quot;, $(tblur), \
								&quot;swidth&quot;, $(swidth), &quot;twidth&quot;, $(twidth), \
								&quot;samples&quot;, $(samples), &quot;fill&quot;, $(fill), \
								&quot;filter&quot;, $(filter), &quot;label&quot;, $(label), \
								&quot;subset&quot;, $(subset), &quot;bias&quot;, $(bias), \
								&quot;hitmode&quot;, $(hitmode)
    #elif RENDERER == air
	#define SHADEOP_ARGUMENTS	&quot;bias&quot;, $(bias), \
								/* can&apos;t specify s/blur */ \
								&quot;blur&quot;, $(sblur), &quot;label&quot;, $(label), \
								&quot;maxdist&quot;, $(maxdist), &quot;samples&quot;, $(samples), \
								&quot;subset&quot;, $(subset)
	#else
	#define SHADEOP_ARGUMENTS	&quot;sblur&quot;, $(sblur), &quot;tblur&quot;, $(tblur), \
								&quot;swidth&quot;, $(swidth), &quot;twidth&quot;, $(twidth), \
								&quot;samples&quot;, $(samples), &quot;filter&quot;, $(filter), \
								&quot;fill&quot;, $(fill)
    #endif /* RENDERER */
	
	aov_reflection += $(Kr) * $(tint) * $(val:type) environment(
						$(texname)[$(channel)], $(dir),
						SHADEOP_ARGUMENTS );
	$(val) = aov_reflection;
	#undef SHADEOP_ARGUMENTS
	
				</rsl_code>
			<rsl_include/>
			<usage>This block returns the texture value from an environment map, for the specified direction vector. If the filename specified is &quot;raytrace&quot; then raytracing is used instead of a texture map. The variables &quot;sblur&quot; and &quot;tblur&quot; specify the blur along the &quot;S&quot; and &quot;T&quot; directions respectively, while &quot;swidth&quot; and &quot;twidth&quot; specify the filter width along the &quot;S&quot; and &quot;T&quot; directions respectively. The filter type can be &quot;box&quot;, &quot;triangle&quot;, or &quot;gaussian&quot;, with &quot;samples&quot; controling the number of samples to use. The starting channel is specified with the &quot;channel&quot; parameter. The type returned can be float, or color, and it is passed to the preset &quot;aov_reflection&quot; AOV. When raytracing is used, extra parameters available to raytracing functions are available, such as &quot;label&quot;, &quot;subset&quot;, &quot;bias&quot; and &quot;hitmode&quot;. Note that this function might vary considerably with each renderer, so please check your renderer&apos;s documentation.			</usage>
		</block>
		<block id="FaceForward" position_x="-1" position_y="-2" author="rconstruct">
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Vector or Normal to flip" type_parent="NN">
				<connection parent="Normalize" output="val"/>
			</input>
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Vector to face away from">
				<connection parent="Normalize_2" output="val"/>
			</input>
			<input name="Nref" type="normal" storage="varying" value="Ng" description="Optional reference vector" type_parent="NN"/>
			<output name="NN" type="normal" storage="varying" description="A vector pointing in the direction oposite to I"/>
			<rsl_code>
		$(NN) = faceforward( $(N), $(I), $(Nref) );
				</rsl_code>
			<rsl_include/>
			<usage>This function will flip the direction of N so that it faces a direction oposite to that of I, with respect to Nref.			</usage>
		</block>
		<block id="I" position_x="-3" position_y="-4" author="rconstruct">
			<output name="I" type="vector" storage="varying" description="Incident ray direction"/>
			<rsl_code>
	$(I) = I;
				</rsl_code>
			<rsl_include/>
			<usage>Incident ray direction. The availability of this global variable for the different shading contexts is renderer specific.			</usage>
		</block>
		<block id="Multiply" position_x="-1" position_y="-4" author="rconstruct">
			<input name="A" type="vector" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Normalize_2" output="val"/>
			</input>
			<input name="B" type="vector" storage="varying" multi="*" value="vector(-1)" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="vector" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
				</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.			</usage>
		</block>
		<block id="N" position_x="-3" position_y="-1" author="rconstruct">
			<output name="N" type="normal" storage="varying" description="Surface shading normal"/>
			<rsl_code>
    $(N) = N;
    			</rsl_code>
			<rsl_include/>
			<usage>Surface shading normal. The availability of this global variable in the different shading contexts is renderer specific. It&apos;s not available in imager shaders.			</usage>
		</block>
		<block id="Normalize" position_x="-3" position_y="-2" author="rconstruct">
			<input name="A" type="normal" storage="varying" value="N" description="Input vector" type_parent="val">
				<connection parent="N" output="N"/>
			</input>
			<output name="val" type="normal" storage="varying" description="Output unit length vector"/>
			<rsl_code>
		$(val) = normalize( $(A) );
				</rsl_code>
			<rsl_include/>
			<usage>Returns a unit vector in the direction of input vector (V/length(V)).			</usage>
		</block>
		<block id="Normalize_2" position_x="-3" position_y="-3" author="rconstruct">
			<input name="A" type="vector" storage="varying" value="N" description="Input vector" type_parent="val">
				<connection parent="I" output="I"/>
			</input>
			<output name="val" type="vector" storage="varying" description="Output unit length vector"/>
			<rsl_code>
		$(val) = normalize( $(A) );
				</rsl_code>
			<rsl_include/>
			<usage>Returns a unit vector in the direction of input vector (V/length(V)).			</usage>
		</block>
		<block id="OrenNayar" position_x="-0" position_y="5" author="rconstruct">
			<input name="Cdiff" type="color" storage="varying" value="color(.5)" description="Diffuse color"/>
			<input name="Kd" type="float" storage="varying" value="0.8" description="Diffuse light coefficient"/>
			<input name="roughness" type="float" storage="varying" value=".2" description="roughness"/>
			<input name="qualitative" type="float" storage="uniform" value="1" description="Toggle qualitative or full model"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="V" type="vector" storage="varying" value="normalize(I)" description="Direction of viewer"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
	
		aov_surfacecolor += $(Cdiff);
		
	#define use_qualitative_$(qualitative)
	#ifdef use_qualitative_1
		/* Air&apos;s diffuse can take a roughness parameter, in which */
		/* case behaves as the Oren-Nayar (qualitative?) model */
		#if RENDERER == air
		aov_diffuse += $(Kd) * diffuse( $(N), $(roughness) );
		#else
		aov_diffuse += $(Kd) * OrenNayar( $(roughness), $(N), $(V) );
		#endif /* RENDERER */
        $(Ci) = aov_surfacecolor * aov_diffuse;
	#else
		aov_diffuse += $(Kd) * LG_OrenNayar( $(Cdiff), $(roughness), $(N),
												$(V) );
		$(Ci) = aov_diffuse;
	#endif /* use_qualitative_$(qualitative) */
	#undef use_qualitative_$(qualitative)
	
				</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h			</rsl_include>
			<usage>Oren-Nayar diffuse term. This block has both the &quot;qualitative&quot; model based on Szymon Rusinkiewicz&apos;s implementation, and the full model with inter-reflections, based on Larry Gritz&apos;s implementation, depending on the content of the qualitative variable in the block. The roughness parameter controls the standard deviation of angle orientations of the surface grooves, so when roughness = 0, the term is Lambertian. The diffuse color value is passed to the aov_surfacecolor, and the diffuse value to the aov_diffuse AOV presets, only for the qualitative model (see the header for the C3 coefficient and L1 and L2 variables).			</usage>
		</block>
		<block id="Reflect" position_x="2" position_y="-2" author="rconstruct">
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Incident vector">
				<connection parent="Normalize_2" output="val"/>
			</input>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal">
				<connection parent="FaceForward" output="NN"/>
			</input>
			<output name="R" type="vector" storage="varying" description="The reflected vector"/>
			<rsl_code>
		$(R) = reflect( $(I), $(N) );
				</rsl_code>
			<rsl_include/>
			<usage>Returns the vector &quot;I&quot; reflected about the unit length normal &quot;N&quot;. It&apos;s equivalent to: I-2*(N.I)*N.			</usage>
		</block>
		<block id="Root block" position_x="8" position_y="2" author="" root="RIB">
			<rib_statements>Attribute &quot;visibility&quot; &quot;integer diffuse&quot; [ 1 ]
Attribute &quot;visibility&quot; &quot;integer specular&quot; [ 1 ]
Attribute &quot;visibility&quot; &quot;integer transmission&quot; [ 1 ]
Attribute &quot;cull&quot; &quot;integer hidden&quot; [ 0 ]
Attribute &quot;cull&quot; &quot;integer backfacing&quot; [ 0 ]
			</rib_statements>
			<imager_statement/>
			<input name="Ci" type="color" storage="varying" shader_parameter="1" value="0" description="Incident ray colour">
				<connection parent="Add_2" output="val"/>
			</input>
			<input name="Oi" type="color" storage="varying" shader_parameter="1" value="1" description="Incident ray opacity"/>
			<input name="P" type="point" storage="varying" shader_parameter="1" value="P" description="Displaced surface position"/>
			<input name="N" type="normal" storage="varying" shader_parameter="1" value="N" description="Displaced surface shading normal"/>
			<input name="Cl" type="color" storage="varying" shader_parameter="1" value="0" description="Outgoing light ray colour"/>
			<input name="Ol" type="color" storage="varying" shader_parameter="1" value="1" description="Outgoing light ray opacity"/>
			<input name="Cv" type="color" storage="varying" shader_parameter="1" value="0" description="Attenuated ray colour"/>
			<input name="Ov" type="color" storage="varying" shader_parameter="1" value="1" description="Attenuated ray opacity"/>
			<input name="Cm" type="color" storage="varying" shader_parameter="1" value="0" description="Output pixel colour"/>
			<input name="Om" type="color" storage="varying" shader_parameter="1" value="1" description="Output pixel opacity"/>
			<input name="AOV" type="color" storage="varying" shader_parameter="1" value="1" description="AOV preview output"/>
			<rsl_code/>
			<rsl_include/>
			<usage/>
		</block>
		<block id="Schlick_Fresnel" position_x="2" position_y="-3" author="rconstruct">
			<input name="ior" type="float" storage="varying" value="5" description="Index of refraction"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal">
				<connection parent="FaceForward" output="NN"/>
			</input>
			<input name="V" type="vector" storage="varying" value="-normalize(I)" description="Direction of viewer">
				<connection parent="Multiply" output="val"/>
			</input>
			<output name="Kr" type="float" storage="varying" description="Reflection amount"/>
			<rsl_code>
		$(Kr) = schlickfresnel( $(N), $(V), $(ior) );
				</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h			</rsl_include>
			<usage>Christophe Schlick&apos;s fast Fresnel approximation function. This function fails to model the reflectance when the ior of the medium in which the ray travels is higher than the ior of the medium the ray is about to refract into, and doesn&apos;t takes into account total internal reflection.			</usage>
		</block>
	</network>
</shrimp>
