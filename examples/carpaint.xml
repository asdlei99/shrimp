<shrimp name="new_scene" authors="">
	<about/>
	<network>
		<block id="Abs_2" position_x="-2" position_y="1" author="rconstruct">
			<input name="x" type="float" storage="varying" value="1" description="Input value">
				<connection parent="Dot_2" output="val"/>
			</input>
			<output name="val" type="float" storage="varying" description="Absolute value of x"/>
			<rsl_code>
		$(val) = abs( $(x) );
													</rsl_code>
			<rsl_include/>
			<usage>Returns the absolute value of the argument being passed.												</usage>
		</block>
		<block id="Add" position_x="7" position_y="2" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="OrenNayar" output="Ci"/>
			</input>
			<input name="B" type="color" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="CookTorrance" output="Ci"/>
			</input>
			<output name="val" type="color" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
													</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.												</usage>
		</block>
		<block id="AmbientLight" position_x="6" position_y="-1.3" author="rconstruct">
			<input name="intensity" type="float" storage="varying" value="1" description="Light intensity"/>
			<input name="lightcolor" type="color" storage="varying" value="color( 1, .93, .81 )" description="Light color"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light category"/>
			<output name="Cl" type="color" storage="varying" description="Light ray color"/>
			<rsl_code>
		__category = $(category);
		$(Cl) = $(intensity) * $(lightcolor);
		L = vector(0);
				</rsl_code>
			<rsl_include/>
			<usage>Ambient light shader.			</usage>
		</block>
		<block id="Area_2" position_x="-4" position_y="-4" author="rconstruct">
			<input name="p" type="point" storage="varying" value="P" description="Point to compute area at">
				<connection parent="Transform" output="pp"/>
			</input>
			<input name="strat" type="string" storage="uniform" value="&quot;shading&quot;" description="Strategy"/>
			<output name="val" type="float" storage="varying" description="Differential surface area at p"/>
			<rsl_code>
	#if RENDERER == aqsis
		$(val) = area( $(p) );
	#else
		$(val) = area( $(p), $(strat) );
	#endif
													</rsl_code>
			<rsl_include/>
			<usage>Returns the geometric mean of the change of &quot;p&quot; between adjacent samples in each parametric direction. It can be interpreted as the area of the microfacet if the parameter being passed is the surface point &quot;P&quot;. The &quot;strategy&quot; variable can be either &quot;shading&quot;, in which case the micropolygon area is calculated with the surface derivatives, or &quot;dicing&quot;, in which case the micropolygons area will be calculated using their geometry. If unspecified, it defaults to &quot;shading&quot;.												</usage>
		</block>
		<block id="CookTorrance" position_x="3" position_y="-0" author="rconstruct">
			<input name="Cspec" type="color" storage="varying" value="color(1)" description="Specular color">
				<connection parent="Spline_2" output="val"/>
			</input>
			<input name="Ks" type="float" storage="varying" value="1.0" description="Specular light coefficient"/>
			<input name="roughness" type="float" storage="varying" value="0.2" description="The apparent surface roughness.">
				<connection parent="Divide_2" output="val"/>
			</input>
			<input name="distribution" type="float" storage="uniform" value="0" description="Microfacet distributions, see help."/>
			<input name="attenuation" type="float" storage="uniform" value="0" description="Geometric attenuation, see help."/>
			<input name="ior" type="float" storage="varying" value="2" description="Index of refraction"/>
			<input name="extinction" type="float" storage="varying" value="2" description="Extinction coefficient"/>
			<input name="samples" type="float" storage="varying" value="4" description="Reflection samples"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="I" type="vector" storage="varying" value="I" description="Direction of viewer"/>
			<input name="direction" type="vector" storage="varying" value="dPdv" description="Anisotropy direction"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
        aov_specularcolor = $(Cspec);

        #if RENDERER==_3delight

        uniform string raytype = &quot;&quot;;
        rayinfo(&quot;type&quot;, raytype);

        if (raytype != &quot;diffuse&quot;)
        {
            aov_specular += $(Ks) *
                cooktorrance(
                    $(N), $(I), $(direction),
                    $(ior), $(extinction), $(roughness),
                    $(distribution), $(attenuation), $(category));

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            uniform string $(blockname)_envmap = &quot;&quot;;
            uniform string $(blockname)_envspace = &quot;&quot;;

            if ($(blockname)_gi_light != null)
            {
                $(blockname)_envmap = $(blockname)_gi_light-&gt;envmap;
                $(blockname)_envspace = $(blockname)_gi_light-&gt;envspace;
            }

            aov_reflection += $(Ks) *
                trace(P, $(N), &quot;bsdf&quot;, &quot;cook-torrance&quot;,
                    &quot;wo&quot;, -$(I), &quot;roughness&quot;, $(roughness),
                    &quot;samples&quot;, $(samples), &quot;eta&quot;, $(ior),
                    &quot;samplearealights&quot;, 1,
                    &quot;weight&quot;, $(Cspec),
                    &quot;environmentmap&quot;, $(blockname)_envmap,
                    &quot;environmentspace&quot;, $(blockname)_envspace);
        }

        #else

        uniform string raytype = &quot;&quot;;
        rayinfo(&quot;type&quot;, raytype);

        if (raytype != &quot;diffuse&quot;)
        {
            aov_specular += $(Ks) *
                cooktorrance(
                    $(N), $(I), $(direction),
                    $(ior), $(extinction),
                    $(roughness), $(distribution),
                    $(attenuation), $(category));
        }

        #endif

		$(Ci) = aov_specularcolor * (aov_specular + aov_reflection);

				</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h			</rsl_include>
			<usage>Cook-Torrance specular term. The &quot;distribution&quot; variable controls the microfacet distribution function being used, being 0 = Beckmann (default), 1 = Ward, 2 = Trowbridge-Reitz, 3 = Heidrich-Seidel (anisotropic). The &quot;attenuation&quot; variable controls the geometric attenuation function being used, being 0 = the default shadowing/masking function proposed by Blinn for the Torrance-Sparrow model, 1 = the approximation suggested by Christophe Schlick for the first Smith shadowing/masking equation for a known microfacet normal, 2 = full Smith second equation for an averaged microfacet normal (as used in the He-Torrance model). In the case of the Heidrich-Seidel anisotropic distribution, some literature mentions adding an isotropic specular term, which is added here via &quot;specularbrdf&quot;, but the user might want to override this in the respective header - this distribution uses the anisotropy direction defined by &quot;direction&quot;, which defaults to the global variable &quot;dPdv&quot;. The specular color value is passed to &quot;aov_specularcolor&quot;, while the specular value is passed to the &quot;aov_specular&quot; AOV presets. The Fresnel term used is the complex Fresnel function, from the Odforce.net Odwiki, courtesy of Mario Marengo and the Odforce community, using the &quot;ior&quot; index of refraction, and the &quot;extinction&quot; extinction coefficient. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.			</usage>
		</block>
		<block id="Divide_2" position_x="-2" position_y="-1" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="FNoise2D_2" output="val"/>
			</input>
			<input name="B" type="float" storage="varying" value="3" description="2nd input" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A / B"/>
			<rsl_code>
		$(val) = $(A) / $(B);
													</rsl_code>
			<rsl_include/>
			<usage>Divides input A by input B.												</usage>
		</block>
		<block id="Dot_2" position_x="-2" position_y="2" author="rconstruct">
			<input name="A" type="vector" storage="varying" value="vector(0)" description="1st Input">
				<connection parent="Multiply_3" output="val"/>
			</input>
			<input name="B" type="normal" storage="varying" value="vector(1)" description="2nd Input">
				<connection parent="FaceForward_2" output="NN"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = A . B"/>
			<rsl_code>
		$(val) = $(A).$(B);
													</rsl_code>
			<rsl_include/>
			<usage>Returns the dot product of two vectors, the sum of the products of each component of the two vectors.												</usage>
		</block>
		<block id="FNoise2D_2" position_x="-4" position_y="-1" author="rconstruct">
			<input name="x" type="float" storage="varying" value="s" description="noise x co-ordinate">
				<connection parent="Multiply_5" output="val"/>
			</input>
			<input name="y" type="float" storage="varying" value="t" description="noise y co-ordinate">
				<connection parent="Multiply_6" output="val"/>
			</input>
			<input name="width" type="float" storage="varying" value="0" description="Filter width">
				<connection parent="Sqrt_2" output="val"/>
			</input>
			<input name="amplitude" type="float" storage="varying" value="1" description="Amplitude of noise"/>
			<output name="val" type="float" storage="varying" description="Noise value at (x,y)"/>
			<rsl_code>
	#define $(blockname)_$(val:type) 1
	#ifdef $(blockname)_float
		$(val) = $(amplitude) * $(val:type) filterednoisexy( $(x), $(y),
															 $(width) );
	#else
		$(val) = $(amplitude) * $(val:type) filteredvnoisexy( $(x), $(y),
																$(width) );
	#endif
	#undef $(blockname)_$(val:type)
													</rsl_code>
			<rsl_include>rsl_shrimp_fractal.h												</rsl_include>
			<usage>Filtered two dimensional Perlin noise function, in [0, &quot;amplitude&quot;] range.												</usage>
		</block>
		<block id="FaceForward_2" position_x="-4" position_y="4" author="rconstruct">
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Vector or Normal to flip" type_parent="NN">
				<connection parent="Normalize_4" output="val"/>
			</input>
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Vector to face away from">
				<connection parent="Normalize_3" output="val"/>
			</input>
			<input name="Nref" type="normal" storage="varying" value="Ng" description="Optional reference vector" type_parent="NN"/>
			<output name="NN" type="normal" storage="varying" description="A vector pointing in the direction oposite to I"/>
			<rsl_code>
		$(NN) = faceforward( $(N), $(I), $(Nref) );
													</rsl_code>
			<rsl_include/>
			<usage>This function will flip the direction of N so that it faces a direction oposite to that of I, with respect to Nref.												</usage>
		</block>
		<block id="Fresnel_2" position_x="-1" position_y="5" author="rconstruct">
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Incident vector"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal">
				<connection parent="FaceForward_2" output="NN"/>
			</input>
			<input name="eta" type="float" storage="varying" value=".5" description="The relative index of refraction"/>
			<output name="R" type="vector" storage="varying" description="The reflected vector"/>
			<output name="T" type="vector" storage="varying" description="The refracted vector"/>
			<output name="Kr" type="float" storage="varying" description="The reflected coefficient"/>
			<output name="Kt" type="float" storage="varying" description="The refracted coefficient"/>
			<rsl_code>
		/* initialize */
		$(Kr) = 0; $(Kt) = 0; $(R) = vector(0); $(T) = vector(0);
        fresnel( $(I), $(N), $(eta), $(Kr), $(Kt), $(R), $(T) );
													</rsl_code>
			<rsl_include/>
			<usage>Return the reflection coefficient Kr and the refraction (or transmission) coefficient &quot;Kt&quot;, given an incident direction &quot;I&quot;, the surface normal &quot;N&quot;, and the relative index of refraction &quot;eta&quot;. Eta is the ratio of the index of refraction in the volume containing the incident vector, to that of the volume being entered. These coefficients are computed using the Fresnel formula. This function also returns the reflected &quot;R&quot; and transmitted &quot;T&quot; vectors.												</usage>
		</block>
		<block id="I_2" position_x="-7" position_y="2" author="rconstruct">
			<output name="I" type="vector" storage="varying" description="Incident ray direction"/>
			<rsl_code>
	$(I) = I;
													</rsl_code>
			<rsl_include/>
			<usage>Incident ray direction. The availability of this global variable for the different shading contexts is renderer specific.												</usage>
		</block>
		<block id="Multiply_3" position_x="-4" position_y="2" author="rconstruct">
			<input name="A" type="vector" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Normalize_3" output="val"/>
			</input>
			<input name="B" type="vector" storage="varying" multi="*" value="vector(-1)" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="vector" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
													</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.												</usage>
		</block>
		<block id="Multiply_5" position_x="-6" position_y="0" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="st_2" output="s"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="255" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
													</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.												</usage>
		</block>
		<block id="Multiply_6" position_x="-6" position_y="-1" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="st_2" output="t"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="255" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
													</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.												</usage>
		</block>
		<block id="N_2" position_x="-7" position_y="5" author="rconstruct">
			<output name="N" type="normal" storage="varying" description="Surface shading normal"/>
			<rsl_code>
    $(N) = N;
    												</rsl_code>
			<rsl_include/>
			<usage>Surface shading normal. The availability of this global variable in the different shading contexts is renderer specific. It&apos;s not available in imager shaders.												</usage>
		</block>
		<block id="Normalize_3" position_x="-7" position_y="3" author="rconstruct">
			<input name="A" type="vector" storage="varying" value="N" description="Input vector" type_parent="val">
				<connection parent="I_2" output="I"/>
			</input>
			<output name="val" type="vector" storage="varying" description="Output unit length vector"/>
			<rsl_code>
		$(val) = normalize( $(A) );
													</rsl_code>
			<rsl_include/>
			<usage>Returns a unit vector in the direction of input vector (V/length(V)).												</usage>
		</block>
		<block id="Normalize_4" position_x="-7" position_y="4" author="rconstruct">
			<input name="A" type="normal" storage="varying" value="N" description="Input vector" type_parent="val">
				<connection parent="N_2" output="N"/>
			</input>
			<output name="val" type="normal" storage="varying" description="Output unit length vector"/>
			<rsl_code>
		$(val) = normalize( $(A) );
													</rsl_code>
			<rsl_include/>
			<usage>Returns a unit vector in the direction of input vector (V/length(V)).												</usage>
		</block>
		<block id="OrenNayar" position_x="3" position_y="5.35294117647059" author="rconstruct">
			<input name="Cdiff" type="color" storage="varying" value="color(.5)" description="Diffuse color">
				<connection parent="Spline_2" output="val"/>
			</input>
			<input name="Kd" type="float" storage="varying" value="0.8" description="Diffuse light coefficient">
				<connection parent="Fresnel_2" output="Kt"/>
			</input>
			<input name="roughness" type="float" storage="varying" value="0.05" description="roughness"/>
			<input name="qualitative" type="float" storage="uniform" value="1" description="Toggle qualitative or full model"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Direction of viewer"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
	#define use_qualitative_$(qualitative)
		aov_surfacecolor += $(Cdiff);
	
	#ifdef use_qualitative_1
		/* Air&apos;s diffuse can take a roughness parameter, in which */
		/* case behaves as the Oren-Nayar (qualitative?) model */
		#if RENDERER == air
			aov_diffuse += $(Kd) * diffuse( $(N), $(roughness) );
		#else
			aov_diffuse += $(Kd) * OrenNayar(	$(roughness), $(N), $(I),
												$(category) );
		#endif /* RENDERER */
        $(Ci) = aov_surfacecolor * aov_diffuse;
	#else
		aov_diffuse += $(Kd) * LG_OrenNayar( $(Cdiff), $(roughness), $(N),
												$(I), $(category) );
		$(Ci) = aov_diffuse;
	#endif /* use_qualitative_$(qualitative) */
	#undef use_qualitative_$(qualitative)
	
										</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h									</rsl_include>
			<usage>Oren-Nayar diffuse term. This block has both the &quot;qualitative&quot; model based on Szymon Rusinkiewicz&apos;s implementation, and the full model with inter-reflections, based on Larry Gritz&apos;s implementation, depending on the content of the qualitative variable in the block. The roughness parameter controls the standard deviation of angle orientations of the surface grooves, so when roughness = 0, the term is Lambertian. The diffuse color value is passed to the aov_surfacecolor, and the diffuse value to the aov_diffuse AOV presets, only for the qualitative model (see the header for the C3 coefficient and L1 and L2 variables). The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.									</usage>
		</block>
		<block id="Root block" position_x="10" position_y="2" author="" root="RIB" AOV_preview="1">
			<rib_statements>Hider &quot;raytrace&quot; &quot;int jitter&quot; [1]

Option &quot;trace&quot; &quot;int maxdepth&quot; [10]
Option &quot;trace&quot; &quot;int diffuseraycache&quot; [1]

Attribute &quot;visibility&quot; &quot;int trace&quot; [1]
Attribute &quot;visibility&quot; &quot;int diffuse&quot; [1]
Attribute &quot;visibility&quot; &quot;int specular&quot; [1]
Attribute &quot;visibility&quot; &quot;int transmission&quot; [1]

Attribute &quot;shade&quot; &quot;string diffusehitmode&quot; [&quot;shader&quot;]
Attribute &quot;shade&quot; &quot;string specularhitmode&quot; [&quot;shader&quot;]
Attribute &quot;shade&quot; &quot;string transmissionhitmode&quot; [&quot;shader&quot;]

Attribute &quot;trace&quot; &quot;int diffusemaxdepth&quot; [4]
Attribute &quot;trace&quot; &quot;int specularmaxdepth&quot; [4]

Attribute &quot;light&quot; &quot;string shadows&quot; [&quot;on&quot;]

Attribute &quot;user&quot; &quot;int lightsamples&quot; [16] # arealights
Attribute &quot;user&quot; &quot;int gi_light_samples&quot; [16] # GI
Option &quot;user&quot; &quot;string gi_light_envmap&quot; [&quot;~/OSS/HDRIs/uffizi-large.hdr&quot;]
Option &quot;user&quot; &quot;string gi_light_envspace&quot; [&quot;world&quot;]
			</rib_statements>
			<imager_statement/>
			<input name="Ci" type="color" storage="varying" shader_parameter="1" value="0" description="Incident ray colour">
				<connection parent="Add" output="val"/>
			</input>
			<input name="Oi" type="color" storage="varying" shader_parameter="1" value="1" description="Incident ray opacity"/>
			<input name="P" type="point" storage="varying" shader_parameter="1" value="P" description="Displaced surface position"/>
			<input name="N" type="normal" storage="varying" shader_parameter="1" value="N" description="Displaced surface shading normal"/>
			<input name="Cl" type="color" storage="varying" shader_parameter="1" value="0" description="Outgoing light ray colour">
				<connection parent="AmbientLight" output="Cl"/>
			</input>
			<input name="Ol" type="color" storage="varying" shader_parameter="1" value="1" description="Outgoing light ray opacity"/>
			<input name="Cv" type="color" storage="varying" shader_parameter="1" value="0" description="Attenuated ray colour"/>
			<input name="Ov" type="color" storage="varying" shader_parameter="1" value="1" description="Attenuated ray opacity"/>
			<input name="Cm" type="color" storage="varying" shader_parameter="1" value="0" description="Output pixel colour"/>
			<input name="Om" type="color" storage="varying" shader_parameter="1" value="1" description="Output pixel opacity"/>
			<input name="AOV" type="color" storage="varying" shader_parameter="1" value="1" description="AOV preview output"/>
			<rsl_code/>
			<rsl_include/>
			<usage/>
		</block>
		<block id="Spline_2" position_x="-0" position_y="1" author="rconstruct">
			<input name="basis" type="string" storage="uniform" value="&quot;bezier&quot;" description="The basis function"/>
			<input name="x" type="float" storage="varying" value="0" description="The value to test the spline at">
				<connection parent="Abs_2" output="val"/>
			</input>
			<input name="cp1" type="color" storage="varying" value="0 0.243137 0.52549" description="The 1st Control Point" type_parent="val"/>
			<input name="cp2" type="color" storage="varying" value="0 0.345098 0.741176" description="The 2nd Control Point" type_parent="val"/>
			<input name="cp3" type="color" storage="varying" value="0 0.607843 1" description="The 3rd Control Point" type_parent="val"/>
			<input name="cp4" type="color" storage="varying" multi="," value="0.32549 0.878431 1" description="The 4th or subsequent Control Points" type_parent="val"/>
			<output name="val" type="color" storage="varying" description="The value of the spline at x"/>
			<rsl_code>
		$(val) = spline( $(basis), $(x), $(cp1), $(cp2), $(cp3), $(cp4) );
													</rsl_code>
			<rsl_include/>
			<usage>Fits a spline into the control points passed, using the specified spline basis function. These can be of type &quot;catmull-rom&quot;, &quot;bezier&quot;, &quot;bspline&quot;, &quot;hermite&quot;, or &quot;linear&quot;. Defaults to &quot;catmull-rom&quot;. In 3delight, any spline type may be prefixed by &quot;solve&quot;, such as &quot;solvecatmull-rom&quot;, in which case this shadeop becomes a root solver and may be used as an invert function. The number of required data points is, for &quot;catmull-rom&quot;, 4 or higher; for &quot;bezier&quot;, 4n+3; for &quot;hermite&quot;, 4n+2; for &quot;bspline&quot; 4 or higher.												</usage>
		</block>
		<block id="Sqrt_2" position_x="-4" position_y="-3" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="Input value">
				<connection parent="Area_2" output="val"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = sqrt( A )"/>
			<rsl_code>
		$(val) = sqrt( $(A) );
													</rsl_code>
			<rsl_include/>
			<usage>Returns the square root of the argument												</usage>
		</block>
		<block id="Transform" position_x="-6" position_y="-2" author="rconstruct">
			<input name="p" type="point" storage="varying" value="P" description="Point, vector or normal to transform" type_parent="pp">
				<connection parent="p_2" output="P"/>
			</input>
			<input name="from_space" type="string" storage="uniform" value="&quot;camera&quot;" description="The coordinate system to transform from"/>
			<input name="to_space" type="string" storage="uniform" value="&quot;shader&quot;" description="The coordinate system to transform into"/>
			<input name="mmat" type="matrix" storage="varying" value="UND" description="Use this matrix instead of a predefined coordinate system"/>
			<output name="pp" type="point" storage="varying" description="The transformed point, vector or normal"/>
			<rsl_code>
	#ifdef TRANSFORM_ARGUMENTS
	#undef TRANSFORM_ARGUMENTS
	#endif

	#define mmat_$(mmat)
	#ifdef mmat_UND
		#define TRANSFORM_ARGUMENTS $(to_space)
	#else
		#define TRANSFORM_ARGUMENTS	$(mmat)
	#endif /* mmat_UND */

	#define $(blockname)_$(p:type) 1
	#ifdef $(blockname)_point
		$(pp) = transform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#elif $(blockname)_vector
		$(pp) = vtransform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#elif $(blockname)_normal
		$(pp) = ntransform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#endif /* $(blockname)_$(p:type) */
	#undef $(blockname)_$(p:type)
	
	#undef mmat_$(mmat)
	#undef TRANSFORM_ARGUMENTS
													</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h												</rsl_include>
			<usage>A block for the &quot;transform&quot;, &quot;vtransform&quot; and &quot;ntransform&quot; functions, to transform the supplied point &quot;P&quot;, vector &quot;V&quot; or normal &quot;N&quot; respectively, from the coordinate system &quot;fromspace&quot; to the coordinate system &quot;tospace&quot;, with &quot;fromspace&quot; defaulting to &quot;current&quot;. Note that &quot;current&quot; is implementation specific. Predefined coordinate systems are: &quot;current&quot;, &quot;object&quot;, &quot;shader&quot;, &quot;world&quot;, &quot;camera&quot;, &quot;screen&quot;, &quot;raster&quot; and &quot;NDC&quot;. A transformation matrix might be given instead of a &quot;tospace&quot; coordinate system. User defined coordinate systems can also be refered to.												</usage>
		</block>
		<block id="p_2" position_x="-8" position_y="-2" author="rconstruct">
			<output name="P" type="point" storage="varying" description="Surface position"/>
			<rsl_code>
    $(P) = P;
    												</rsl_code>
			<rsl_include/>
			<usage>Note that in all shading contexts, &quot;P&quot; is the surface position, the only exception being volume shaders, in which &quot;P&quot; is the light ray origin. Also note that in imager shaders, &quot;P&quot; is the position of the pixel center in raster space, with the z coordinate being 0.												</usage>
		</block>
		<block id="st_2" position_x="-8" position_y="-0" author="rconstruct">
			<output name="s" type="float" storage="varying" description="S texture coordinate"/>
			<output name="t" type="float" storage="varying" description="T texture coordinate"/>
			<rsl_code>
    $(s) = s;
    $(t) = t;
    												</rsl_code>
			<rsl_include/>
			<usage>The surface texturing coordinates. The availability of these global variables in the different shading contexts is renderer specific.												</usage>
		</block>
	</network>
</shrimp>
