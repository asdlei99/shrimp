<shrimp name="Bronze" authors="">
	<about>Bronze test network. The RIB block has some RI statements added, make sure they&apos;re valid for your renderer. The occlusion() shadeop in Aqsis uses depth map based occlusion, occlusion map defaults to &quot;&quot;, needs to be generated previously via depth maps (another test scene will follow later illustrating this)					</about>
	<network>
		<block id="Add" position_x="-5" position_y="0" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="Multiply_4" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="value">
				<connection parent="Multiply_7" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(value) = $(A) + $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																																	</usage>
		</block>
		<block id="Add_2" position_x="-20" position_y="-10" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="Multiply_5" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="+" value=".5" description="2nd or subsequent inputs" type_parent="value"/>
			<output name="value" type="float" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(value) = $(A) + $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																																	</usage>
		</block>
		<block id="Add_3" position_x="12" position_y="-1" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="CookTorrance_2" output="Ci"/>
			</input>
			<input name="B" type="color" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="value">
				<connection parent="Mix_6" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(value) = $(A) + $(B);
				</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.			</usage>
		</block>
		<block id="Add_4" position_x="-12" position_y="-16" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input">
				<connection parent="Multiply_12" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="+" value=".5" description="2nd or subsequent inputs"/>
			<output name="value" type="float" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(value) = $(A) + $(B);
																			</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																		</usage>
		</block>
		<block id="Bump" position_x="-2" position_y="1" author="rconstruct">
			<input name="P" type="point" storage="varying" value="P" description="The surface point to be bumped"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="The surface normal" type_parent="BumpedN"/>
			<input name="bumpscale" type="float" storage="varying" value="0.5" description="Amplitude of the bumping">
				<connection parent="Add" output="value"/>
			</input>
			<output name="BumpedN" type="normal" storage="varying" description="The new surface normal"/>
			<rsl_code>
		$(BumpedN) = normalize( calculatenormal( $(P) + $(N) * $(bumpscale)));
																															</rsl_code>
			<rsl_include/>
			<usage>This is exactly like the displace function except that the new surface position is not computed. Calculates the normal of a position &quot;P&quot; displaced by amount &quot;bumpscale&quot; in direction &quot;N&quot;.																														</usage>
		</block>
		<block id="Clamp" position_x="-9.55964912280702" position_y="-3" author="rconstruct">
			<input name="x" type="float" storage="varying" value="1" description="Input value" type_parent="value">
				<connection parent="Subtract_2" output="value"/>
			</input>
			<input name="minimum" type="float" storage="varying" value="0.0" description="minimum value" type_parent="value"/>
			<input name="maximum" type="float" storage="varying" value="1.0" description="maximum value" type_parent="value"/>
			<output name="value" type="float" storage="varying" description="Clamp a between min and max"/>
			<rsl_code>
		$(value) = clamp( $(x), $(minimum), $(maximum) );
																																		</rsl_code>
			<rsl_include/>
			<usage>Clamps the first argument between the minimum and maximum values provided.																																	</usage>
		</block>
		<block id="Clamp_2" position_x="-20" position_y="-12" author="rconstruct">
			<input name="x" type="float" storage="varying" value="1" description="Input value" type_parent="value">
				<connection parent="Ycomp" output="y"/>
			</input>
			<input name="minimum" type="float" storage="varying" value="0.0" description="minimum value" type_parent="value"/>
			<input name="maximum" type="float" storage="varying" value="1.0" description="maximum value" type_parent="value"/>
			<output name="value" type="float" storage="varying" description="Clamp a between min and max"/>
			<rsl_code>
		$(value) = clamp( $(x), $(minimum), $(maximum) );
																			</rsl_code>
			<rsl_include/>
			<usage>Clamps the first argument between the minimum and maximum values provided.																		</usage>
		</block>
		<block id="Clamp_3" position_x="1" position_y="7" author="rconstruct">
			<input name="x" type="float" storage="varying" value="1" description="Input value" type_parent="value">
				<connection parent="Subtract_3" output="value"/>
			</input>
			<input name="minimum" type="float" storage="varying" value="0.5" description="minimum value" type_parent="value"/>
			<input name="maximum" type="float" storage="varying" value="1.0" description="maximum value" type_parent="value"/>
			<output name="value" type="float" storage="varying" description="Clamp a between min and max"/>
			<rsl_code>
		$(value) = clamp( $(x), $(minimum), $(maximum) );
				</rsl_code>
			<rsl_include/>
			<usage>Clamps the first argument between the minimum and maximum values provided.			</usage>
		</block>
		<block id="Clamp_4" position_x="-2" position_y="9" author="rconstruct">
			<input name="x" type="color" storage="varying" value="1" description="Input value" type_parent="value">
				<connection parent="Mix_3" output="value"/>
			</input>
			<input name="minimum" type="color" storage="varying" value="0.0" description="minimum value" type_parent="value"/>
			<input name="maximum" type="color" storage="varying" value="1.0" description="maximum value" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Clamp a between min and max"/>
			<rsl_code>
		$(value) = clamp( $(x), $(minimum), $(maximum) );
				</rsl_code>
			<rsl_include/>
			<usage>Clamps the first argument between the minimum and maximum values provided.			</usage>
		</block>
		<block id="CookTorrance" position_x="9" position_y="9.58333333333333" author="rconstruct">
			<input name="Cspec" type="color" storage="varying" value="color(0.643137, 0.603922, 0.392157)" description="Specular color"/>
			<input name="Ks" type="float" storage="varying" value="1.0" description="Specular light coefficient">
				<connection parent="Clamp_3" output="value"/>
			</input>
			<input name="roughness" type="float" storage="varying" value="0.2" description="The apparent surface roughness."/>
			<input name="distribution" type="float" storage="uniform" value="0" description="Microfacet distributions, see help."/>
			<input name="attenuation" type="float" storage="uniform" value="0" description="Geometric attenuation, see help."/>
			<input name="ior" type="float" storage="varying" value="55" description="Index of refraction"/>
			<input name="extinction" type="float" storage="varying" value="2" description="Extinction coefficient"/>
			<input name="samples" type="float" storage="varying" value="4" description="Reflection samples"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="I" type="vector" storage="varying" value="I" description="Direction of viewer"/>
			<input name="direction" type="vector" storage="varying" value="dPdv" description="Anisotropy direction"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
        aov_specularcolor = $(Cspec);

        #if RENDERER==_3delight

        uniform string raytype = &quot;&quot;;
        rayinfo(&quot;type&quot;, raytype);

        if (raytype != &quot;diffuse&quot;)
        {
            aov_specular += $(Ks) *
                cooktorrance(
                    $(N), $(I), $(direction),
                    $(ior), $(extinction), $(roughness),
                    $(distribution), $(attenuation), $(category));

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            uniform string $(blockname)_envmap = &quot;&quot;;
            uniform string $(blockname)_envspace = &quot;&quot;;

            if ($(blockname)_gi_light != null)
            {
                $(blockname)_envmap = $(blockname)_gi_light-&gt;envmap;
                $(blockname)_envspace = $(blockname)_gi_light-&gt;envspace;
            }

            aov_reflection += $(Ks) *
                trace(P, $(N), &quot;bsdf&quot;, &quot;cook-torrance&quot;,
                    &quot;wo&quot;, -$(I), &quot;roughness&quot;, $(roughness),
                    &quot;samples&quot;, $(samples), &quot;eta&quot;, $(ior),
                    &quot;samplearealights&quot;, 1,
                    &quot;weight&quot;, $(Cspec),
                    &quot;environmentmap&quot;, $(blockname)_envmap,
                    &quot;environmentspace&quot;, $(blockname)_envspace);
        }

        #else

        uniform string raytype = &quot;&quot;;
        rayinfo(&quot;type&quot;, raytype);

        if (raytype != &quot;diffuse&quot;)
        {
            aov_specular += $(Ks) *
                cooktorrance(
                    $(N), $(I), $(direction),
                    $(ior), $(extinction),
                    $(roughness), $(distribution),
                    $(attenuation), $(category));
        }

        #endif

		$(Ci) = aov_specularcolor * (aov_specular + aov_reflection);

				</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h			</rsl_include>
			<usage>Cook-Torrance specular term. The &quot;distribution&quot; variable controls the microfacet distribution function being used, being 0 = Beckmann (default), 1 = Ward, 2 = Trowbridge-Reitz, 3 = Heidrich-Seidel (anisotropic). The &quot;attenuation&quot; variable controls the geometric attenuation function being used, being 0 = the default shadowing/masking function proposed by Blinn for the Torrance-Sparrow model, 1 = the approximation suggested by Christophe Schlick for the first Smith shadowing/masking equation for a known microfacet normal, 2 = full Smith second equation for an averaged microfacet normal (as used in the He-Torrance model). In the case of the Heidrich-Seidel anisotropic distribution, some literature mentions adding an isotropic specular term, which is added here via &quot;specularbrdf&quot;, but the user might want to override this in the respective header - this distribution uses the anisotropy direction defined by &quot;direction&quot;, which defaults to the global variable &quot;dPdv&quot;. The specular color value is passed to &quot;aov_specularcolor&quot;, while the specular value is passed to the &quot;aov_specular&quot; AOV presets. The Fresnel term used is the complex Fresnel function, from the Odforce.net Odwiki, courtesy of Mario Marengo and the Odforce community, using the &quot;ior&quot; index of refraction, and the &quot;extinction&quot; extinction coefficient. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.			</usage>
		</block>
		<block id="CookTorrance_2" position_x="4" position_y="9" author="rconstruct">
			<input name="Cspec" type="color" storage="varying" value="color(1)" description="Specular color">
				<connection parent="Clamp_4" output="value"/>
			</input>
			<input name="Ks" type="float" storage="varying" value="1.0" description="Specular light coefficient">
				<connection parent="Clamp_3" output="value"/>
			</input>
			<input name="roughness" type="float" storage="varying" value="0.3" description="The apparent surface roughness."/>
			<input name="distribution" type="float" storage="uniform" value="0" description="Microfacet distributions, see help."/>
			<input name="attenuation" type="float" storage="uniform" value="0" description="Geometric attenuation, see help."/>
			<input name="ior" type="float" storage="varying" value="1.75" description="Index of refraction"/>
			<input name="extinction" type="float" storage="varying" value="2" description="Extinction coefficient"/>
			<input name="samples" type="float" storage="varying" value="4" description="Reflection samples"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="I" type="vector" storage="varying" value="I" description="Direction of viewer"/>
			<input name="direction" type="vector" storage="varying" value="dPdv" description="Anisotropy direction"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
        aov_specularcolor = $(Cspec);

        #if RENDERER==_3delight

        uniform string raytype = &quot;&quot;;
        rayinfo(&quot;type&quot;, raytype);

        if (raytype != &quot;diffuse&quot;)
        {
            aov_specular += $(Ks) *
                cooktorrance(
                    $(N), $(I), $(direction),
                    $(ior), $(extinction), $(roughness),
                    $(distribution), $(attenuation), $(category));

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            uniform string $(blockname)_envmap = &quot;&quot;;
            uniform string $(blockname)_envspace = &quot;&quot;;

            if ($(blockname)_gi_light != null)
            {
                $(blockname)_envmap = $(blockname)_gi_light-&gt;envmap;
                $(blockname)_envspace = $(blockname)_gi_light-&gt;envspace;
            }

            aov_reflection += $(Ks) *
                trace(P, $(N), &quot;bsdf&quot;, &quot;cook-torrance&quot;,
                    &quot;wo&quot;, -$(I), &quot;roughness&quot;, $(roughness),
                    &quot;samples&quot;, $(samples), &quot;eta&quot;, $(ior),
                    &quot;samplearealights&quot;, 1,
                    &quot;weight&quot;, $(Cspec),
                    &quot;environmentmap&quot;, $(blockname)_envmap,
                    &quot;environmentspace&quot;, $(blockname)_envspace);
        }

        #else

        uniform string raytype = &quot;&quot;;
        rayinfo(&quot;type&quot;, raytype);

        if (raytype != &quot;diffuse&quot;)
        {
            aov_specular += $(Ks) *
                cooktorrance(
                    $(N), $(I), $(direction),
                    $(ior), $(extinction),
                    $(roughness), $(distribution),
                    $(attenuation), $(category));
        }

        #endif

		$(Ci) = aov_specularcolor * (aov_specular + aov_reflection);

				</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h			</rsl_include>
			<usage>Cook-Torrance specular term. The &quot;distribution&quot; variable controls the microfacet distribution function being used, being 0 = Beckmann (default), 1 = Ward, 2 = Trowbridge-Reitz, 3 = Heidrich-Seidel (anisotropic). The &quot;attenuation&quot; variable controls the geometric attenuation function being used, being 0 = the default shadowing/masking function proposed by Blinn for the Torrance-Sparrow model, 1 = the approximation suggested by Christophe Schlick for the first Smith shadowing/masking equation for a known microfacet normal, 2 = full Smith second equation for an averaged microfacet normal (as used in the He-Torrance model). In the case of the Heidrich-Seidel anisotropic distribution, some literature mentions adding an isotropic specular term, which is added here via &quot;specularbrdf&quot;, but the user might want to override this in the respective header - this distribution uses the anisotropy direction defined by &quot;direction&quot;, which defaults to the global variable &quot;dPdv&quot;. The specular color value is passed to &quot;aov_specularcolor&quot;, while the specular value is passed to the &quot;aov_specular&quot; AOV presets. The Fresnel term used is the complex Fresnel function, from the Odforce.net Odwiki, courtesy of Mario Marengo and the Odforce community, using the &quot;ior&quot; index of refraction, and the &quot;extinction&quot; extinction coefficient. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.			</usage>
		</block>
		<block id="Copperish" position_x="-10" position_y="3" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( 1, .7, .46)" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																																		</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																																	</usage>
		</block>
		<block id="DarkDryGreen" position_x="-10" position_y="-6" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .13, .13, .09)" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																																		</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																																	</usage>
		</block>
		<block id="Dark_Green" position_x="-7" position_y="-14" author="rconstruct">
			<input name="in" type="color" storage="varying" value="0.227451 0.584314 0.470588" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																			</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																		</usage>
		</block>
		<block id="Dark_Green_2" position_x="-7" position_y="-15" author="rconstruct">
			<input name="in" type="color" storage="varying" value="0.145098 0.380392 0.305882" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																			</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																		</usage>
		</block>
		<block id="DryGreen" position_x="-16" position_y="4" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .16, .2, .08)" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																																		</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																																	</usage>
		</block>
		<block id="FSmoothStep" position_x="-17" position_y="-9" author="rconstruct">
			<input name="x" type="float" storage="varying" value="1" description="Value to test">
				<connection parent="Add_2" output="value"/>
			</input>
			<input name="minimum" type="float" storage="varying" value=".3" description="Position of bottom of step"/>
			<input name="maximum" type="float" storage="varying" value=".9" description="position of top of step"/>
			<input name="filterwidth" type="float" storage="varying" value="1" description="Filter value">
				<connection parent="FWidth" output="filterwidth"/>
			</input>
			<output name="value" type="float" storage="varying" description="value of smoothstep function at x"/>
			<rsl_code>
		$(value) = filteredsmoothstep( $(minimum), $(maximum), $(x), $(filterwidth) );
																																		</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h																																	</rsl_include>
			<usage>Antialiased smoothstep by Larry Gritz. Returns the &quot;box&quot; filter of smoothstep(e0, e1, t) from x-dx/2 to x+dx/2.																																	</usage>
		</block>
		<block id="FSmoothStep_2" position_x="-7" position_y="1" author="rconstruct">
			<input name="x" type="float" storage="varying" value="1" description="Value to test">
				<connection parent="Clamp" output="value"/>
			</input>
			<input name="minimum" type="float" storage="varying" value="0" description="Position of bottom of step"/>
			<input name="maximum" type="float" storage="varying" value="0.4" description="position of top of step"/>
			<input name="filterwidth" type="float" storage="varying" value="1" description="Filter value">
				<connection parent="FWidth" output="filterwidth"/>
			</input>
			<output name="value" type="float" storage="varying" description="value of smoothstep function at x"/>
			<rsl_code>
		$(value) = filteredsmoothstep( $(minimum), $(maximum), $(x), $(filterwidth) );
																															</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h																														</rsl_include>
			<usage>Antialiased smoothstep by Larry Gritz. Returns the &quot;box&quot; filter of smoothstep(e0, e1, t) from x-dx/2 to x+dx/2.																														</usage>
		</block>
		<block id="FWidth" position_x="-22" position_y="-0" author="rconstruct">
			<input name="P" type="point" storage="varying" value="P" description="point under consideration">
				<connection parent="p" output="P"/>
			</input>
			<output name="filterwidth" type="float" storage="varying" description="An estimate of the sample width at p"/>
			<rsl_code>
	#define $(blockname)_$(P:type)
	#ifdef $(blockname)_float
		$(filterwidth) = filterwidth( $(P) );
	#else
		$(filterwidth) = filterwidthp( $(P) );
	#endif /* $(blockname)_$(P:type) */
	#undef $(blockname)_$(P:type)
																																		</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h																																	</rsl_include>
			<usage>The filterwidth function takes a float, or point inputs, and returns the approximate amount that the float or point changes from pixel to adjacent pixel. It&apos;s used to filter frequencies that would otherwise produce aliasing.																																	</usage>
		</block>
		<block id="GetCol" position_x="-16" position_y="2" author="rconstruct">
			<input name="Cin" type="color" storage="varying" value="color(0)" description="Color to split into components">
				<connection parent="SCurve" output="value"/>
			</input>
			<output name="x" type="float" storage="varying" description="1st component"/>
			<output name="y" type="float" storage="varying" description="2nd component"/>
			<output name="z" type="float" storage="varying" description="3rd component"/>
			<rsl_code>
		$(x) = comp( $(Cin), 0 );
		$(y) = comp( $(Cin), 1 );
		$(z) = comp( $(Cin), 2 );
																																		</rsl_code>
			<rsl_include/>
			<usage>Gets the components of a color type variable.																																	</usage>
		</block>
		<block id="Green" position_x="-16" position_y="3" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .18, .41, .27)" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																																		</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																																	</usage>
		</block>
		<block id="LightGreen" position_x="-4" position_y="4" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .76, 1, .82)" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																																		</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																																	</usage>
		</block>
		<block id="LightGreen_1" position_x="-7" position_y="-11" author="rconstruct">
			<input name="in" type="color" storage="varying" value="0.756863 1 0.94902" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																			</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																		</usage>
		</block>
		<block id="LightGreen_2" position_x="-7" position_y="-12" author="rconstruct">
			<input name="in" type="color" storage="varying" value="0.615686 0.894118 0.764706" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																			</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																		</usage>
		</block>
		<block id="LightPatineGreen" position_x="-10" position_y="-8" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .94, 1, .8)" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																																		</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																																	</usage>
		</block>
		<block id="MediumDryGreen" position_x="-10" position_y="-7" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .42, .45, .31)" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																																		</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																																	</usage>
		</block>
		<block id="Medium_Green" position_x="-7" position_y="-13" author="rconstruct">
			<input name="in" type="color" storage="varying" value="0.333333 0.729412 0.545098" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																			</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																		</usage>
		</block>
		<block id="Mix" position_x="-13" position_y="4" author="rconstruct">
			<input name="weight" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="GetCol" output="x"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="value">
				<connection parent="DryGreen" output="value"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="value">
				<connection parent="Green" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(value) = mix( $(A), $(B), $(weight) );
																																		</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values A and B. The types of A and B must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																																	</usage>
		</block>
		<block id="Mix_2" position_x="-10" position_y="5" author="rconstruct">
			<input name="weight" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="GetCol" output="y"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="value">
				<connection parent="PatineGreen" output="value"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="value">
				<connection parent="Mix" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(value) = mix( $(A), $(B), $(weight) );
																																		</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values A and B. The types of A and B must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																																	</usage>
		</block>
		<block id="Mix_3" position_x="-7" position_y="4" author="rconstruct">
			<input name="weight" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="Multiply" output="value"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="value">
				<connection parent="Mix_2" output="value"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="value">
				<connection parent="Copperish" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(value) = mix( $(A), $(B), $(weight) );
																																		</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values A and B. The types of A and B must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																																	</usage>
		</block>
		<block id="Mix_4" position_x="-1" position_y="4" author="rconstruct">
			<input name="weight" type="float" storage="varying" value="0.5" description="The mixing factor"/>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="value">
				<connection parent="LightGreen" output="value"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="value">
				<connection parent="Multiply_3" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(value) = mix( $(A), $(B), $(weight) );
																																		</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values A and B. The types of A and B must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																																	</usage>
		</block>
		<block id="Mix_5" position_x="7" position_y="4" author="rconstruct">
			<input name="weight" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="Clamp" output="value"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="value">
				<connection parent="OrenNayar_2" output="Ci"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="value">
				<connection parent="OrenNayar" output="Ci"/>
			</input>
			<output name="value" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(value) = mix( $(A), $(B), $(weight) );
																															</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values A and B. The types of A and B must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																														</usage>
		</block>
		<block id="Mix_6" position_x="10" position_y="-4" author="rconstruct">
			<input name="weight" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="Multiply_14" output="value"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="value">
				<connection parent="Multiply_9" output="value"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="value">
				<connection parent="OrenNayar_3" output="Ci"/>
			</input>
			<output name="value" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(value) = mix( $(A), $(B), $(weight) );
																			</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values A and B. The types of A and B must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																		</usage>
		</block>
		<block id="Mix_7" position_x="13.3166666666667" position_y="5.56666666666667" author="rconstruct">
			<input name="weight" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="Clamp" output="value"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="value">
				<connection parent="Mix_6" output="value"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="value">
				<connection parent="CookTorrance" output="Ci"/>
			</input>
			<output name="value" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(value) = mix( $(A), $(B), $(weight) );
				</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values A and B. The types of A and B must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).			</usage>
		</block>
		<block id="Multiply" position_x="-11" position_y="1" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="Subtract" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs" type_parent="value">
				<connection parent="GetCol" output="z"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																																	</usage>
		</block>
		<block id="Multiply_10" position_x="-10" position_y="-9" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input">
				<connection parent="Subtract_4" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs">
				<connection parent="Clamp_2" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																			</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																		</usage>
		</block>
		<block id="Multiply_11" position_x="-9" position_y="-16" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input">
				<connection parent="FSmoothStep" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs">
				<connection parent="Add_4" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																			</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																		</usage>
		</block>
		<block id="Multiply_12" position_x="-13" position_y="-14" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input">
				<connection parent="Ridged3D" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value=".5" description="2nd or subsequent inputs"/>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																			</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																		</usage>
		</block>
		<block id="Multiply_13" position_x="-7" position_y="-16" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input">
				<connection parent="Multiply_11" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs">
				<connection parent="GetCol" output="y"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																			</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																		</usage>
		</block>
		<block id="Multiply_14" position_x="4" position_y="-5" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input">
				<connection parent="Occlusion" output="Occlusion"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs">
				<connection parent="Multiply_13" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																			</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																		</usage>
		</block>
		<block id="Multiply_15" position_x="7" position_y="-5" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value"/>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs" type_parent="value"/>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
				</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.			</usage>
		</block>
		<block id="Multiply_2" position_x="-22.45" position_y="-1.675" author="rconstruct">
			<input name="A" type="point" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="p" output="P"/>
			</input>
			<input name="B" type="point" storage="varying" multi="*" value="1" description="2nd or subsequent inputs" type_parent="value"/>
			<output name="value" type="point" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																																	</usage>
		</block>
		<block id="Multiply_3" position_x="-4" position_y="3" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input">
				<connection parent="Mix_3" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs">
				<connection parent="Multiply" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																																	</usage>
		</block>
		<block id="Multiply_4" position_x="-10" position_y="-1" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="Subtract" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="0.01" description="2nd or subsequent inputs" type_parent="value"/>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																																	</usage>
		</block>
		<block id="Multiply_5" position_x="-20" position_y="-9" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="Ycomp" output="y"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value=".5" description="2nd or subsequent inputs" type_parent="value"/>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																																	</usage>
		</block>
		<block id="Multiply_6" position_x="-14.4245614035088" position_y="-5.53684210526316" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="VLfBm3D" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs" type_parent="value">
				<connection parent="FSmoothStep" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																																	</usage>
		</block>
		<block id="Multiply_7" position_x="-7" position_y="-2" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="Clamp" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="-0.02" description="2nd or subsequent inputs" type_parent="value"/>
			<output name="value" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																															</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																														</usage>
		</block>
		<block id="Multiply_9" position_x="7" position_y="2" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="Mix_5" output="value"/>
			</input>
			<input name="B" type="color" storage="varying" multi="*" value="1" description="2nd or subsequent inputs" type_parent="value">
				<connection parent="Occlusion" output="Occlusion"/>
			</input>
			<output name="value" type="color" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(value) = $(A) * $(B);
																															</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																														</usage>
		</block>
		<block id="N" position_x="-25" position_y="-6" author="rconstruct">
			<output name="N" type="normal" storage="varying" description="Surface shading normal"/>
			<rsl_code>
    $(N) = N;
    																																	</rsl_code>
			<rsl_include/>
			<usage>Surface shading normal. The availability of this global variable in the different shading contexts is renderer specific. It&apos;s not available in imager shaders.																																	</usage>
		</block>
		<block id="Normalize" position_x="-23" position_y="-8" author="rconstruct">
			<input name="Vin" type="normal" storage="varying" value="N" description="Input vector" type_parent="value">
				<connection parent="N" output="N"/>
			</input>
			<output name="value" type="normal" storage="varying" description="Output unit length vector"/>
			<rsl_code>
		$(value) = normalize( $(Vin) );
																																		</rsl_code>
			<rsl_include/>
			<usage>Returns a unit vector in the direction of input vector (Vin/length(Vin)).																																	</usage>
		</block>
		<block id="Normalize_2" position_x="-2" position_y="-1" author="rconstruct">
			<input name="Vin" type="normal" storage="varying" value="N" description="Input vector" type_parent="value">
				<connection parent="Bump" output="BumpedN"/>
			</input>
			<output name="value" type="normal" storage="varying" description="Output unit length vector"/>
			<rsl_code>
		$(value) = normalize( $(Vin) );
																															</rsl_code>
			<rsl_include/>
			<usage>Returns a unit vector in the direction of input vector (Vin/length(Vin)).																														</usage>
		</block>
		<block id="Occlusion" position_x="1" position_y="-4.62222222222222" author="rconstruct" rolled="1">
			<input name="P" type="point" storage="varying" value="P" description="Surface point"/>
			<input name="direction" type="normal" storage="varying" value="faceforward( normalize(N), normalize(I))" description="Direction">
				<connection parent="Normalize_2" output="value"/>
			</input>
			<input name="adaptive" type="float" storage="uniform" value="1" description="Turns adaptive sampling on/off"/>
			<input name="minsamples" type="float" storage="uniform" value="4" description="Minimum number of samples to use"/>
			<input name="samples" type="float" storage="varying" value="64" description="Samples"/>
			<input name="samplebase" type="float" storage="uniform" value="1" description="Controls ray origin jittering"/>
			<input name="maxdist" type="float" storage="uniform" value="2" description="Maximum distance"/>
			<input name="maxpixeldist" type="float" storage="varying" value="-1" description="Maximum samples distance"/>
			<input name="maxsolidang" type="float" storage="uniform" value="0.05" description="Maximum solid angle, in steradians"/>
			<input name="maxerror" type="float" storage="varying" value="-1" description="Quality vs speed"/>
			<input name="bias" type="float" storage="varying" value="0.01" description="Bias to control self-intersection"/>
			<input name="coneangle" type="float" storage="uniform" value="PI/4" description="Cone angle"/>
			<input name="axis" type="vector" storage="uniform" value="vector(0)" description="Direction of light casting hemisphere"/>
			<input name="distribution" type="string" storage="uniform" value="&quot;cosine&quot;" description="Distribution"/>
			<input name="hitsides" type="string" storage="uniform" value="&quot;front&quot;" description="Side of surface to consider by a ray hit"/>
			<input name="hitmode" type="string" storage="uniform" value="&quot;default&quot;" description="Ray hit mode"/>
			<input name="label" type="string" storage="uniform" value="&quot;&quot;" description="Ray lavel"/>
			<input name="subset" type="string" storage="uniform" value="&quot;&quot;" description="Objects subset considered"/>
			<input name="envmap" type="string" storage="uniform" value="&quot;&quot;" description="Environment map"/>
			<input name="envspace" type="string" storage="uniform" value="&quot;world&quot;" description="Environment space"/>
			<input name="occlmap" type="string" storage="uniform" value="&quot;&quot;" description="Occlusion map"/>
			<input name="blur" type="float" storage="varying" value="0" description="Shadow map blur"/>
			<input name="useptc" type="float" storage="uniform" value="0" description="Toggle point based occlusion"/>
			<input name="ptcfile" type="string" storage="uniform" value="&quot;&quot;" description="Point cloud filename"/>
			<input name="coordsys" type="string" storage="uniform" value="&quot;world&quot;" description="Point cloud coordinate system"/>
			<input name="clamp" type="float" storage="uniform" value="0" description="Clamp excessive occlusion"/>
			<input name="sortbleeding" type="float" storage="uniform" value="0" description="Sort bleeding"/>
			<input name="falloffmode" type="float" storage="uniform" value="1" description="Falloff mode, exponential or polynomial"/>
			<input name="falloff" type="float" storage="uniform" value="2" description="Falloff, 1 = linear"/>
			<output name="Occlusion" type="float" storage="varying" description="Occlusion value"/>
			<output name="Envcolor" type="color" storage="varying" description="Environment color lookup result"/>
			<output name="Envdirection" type="vector" storage="varying" description="Average unoccluded direction"/>
			<output name="Irradiance" type="color" storage="varying" description="Irradiance"/>
			<rsl_code>
	
	/* initialize */
	$(Envcolor) = color(0); $(Envdirection) = vector(0); $(Irradiance) = color(0);

	/* make sure options are clear */
	/* and set them according to shadeop and renderer */
	#ifdef SHADEOP_ARGUMENTS
	#undef SHADEOP_ARGUMENTS
	#endif /* SHADEOP_ARGUMENTS */
	
	#if RENDERER == _3delight
	#define SHADEOP_ARGUMENTS	&quot;label&quot;, $(label), &quot;subset&quot;, $(subset), \
								&quot;bias&quot;, $(bias), &quot;hitmode&quot;, $(hitmode), \
								&quot;coneangle&quot;, $(coneangle), &quot;axis&quot;, $(axis), \
								&quot;samplebase&quot;, $(samplebase), \
								&quot;maxdist&quot;, $(maxdist), \
								&quot;environmentmap&quot;, $(envmap), \
								&quot;environmentspace&quot;, $(envspace), \
								&quot;distribution&quot;, $(distribution), \
								&quot;environmentcolor&quot;, $(Envcolor), \
								&quot;environmentdir&quot;, $(Envdirection), \
								&quot;adaptive&quot;, $(adaptive), \
								&quot;minsamples&quot;, $(minsamples), \
								&quot;falloffmode&quot;, $(falloffmode), \
								&quot;falloff&quot;, $(falloff), &quot;pointbased&quot;, $(useptc), \
								&quot;filename&quot;, $(ptcfile), &quot;hitsides&quot;, $(hitsides), \
								&quot;maxsolidangle&quot;, $(maxsolidang), \
								&quot;clamp&quot;, $(clamp), \
								&quot;sortbleeding&quot;, $(sortbleeding), \
								&quot;coordsystem&quot;, $(coordsys)
	#elif RENDERER == pixie
	#define SHADEOP_ARGUMENTS	&quot;coordsystem&quot;, $(coordsys), \
								&quot;maxdist&quot;, $(maxdist), \
								&quot;coneangle&quot;, $(coneangle), \
								&quot;samplebase&quot;, $(samplebase), \
								&quot;label&quot;, $(label), &quot;bias&quot;, $(bias), \
								&quot;maxerror&quot;, $(maxerror), \
								&quot;pointbased&quot;, $(useptc), \
								&quot;environmentmap&quot;, $(envmap), \
								&quot;filename&quot;, $(ptcfile), \
								&quot;maxpixeldist&quot;, $(maxpixeldist), \
								&quot;maxsolidangle&quot;, $(maxsolidang), \
								&quot;environmentcolor&quot;, $(Envcolor)
	#elif RENDERER == prman
	#define SHADEOP_ARGUMENTS	&quot;adaptive&quot;, $(adaptive), \
								&quot;minsamples&quot;, $(minsamples), \
								&quot;coordsystem&quot;, $(coordsys), \
								&quot;distribution&quot;, $(distribution), \
								&quot;maxdist&quot;, $(maxdist), \
								&quot;coneangle&quot;, $(coneangle), \
								&quot;samplebase&quot;, $(samplebase), \
								&quot;hitmode&quot;, $(hitmode), \
								&quot;hitsides&quot;, $(hitsides), &quot;subset&quot;, $(subset), \
								&quot;label&quot;, $(label), \
								&quot;environmentmap&quot;, $(envmap), \
								&quot;environmentspace&quot;, $(envspace), \
								&quot;bias&quot;, $(bias), \
								&quot;maxpixeldist&quot;, $(maxpixeldist), \
								&quot;maxerror&quot;, $(maxerror), \
								&quot;falloffmode&quot;, $(falloffmode), \
								&quot;falloff&quot;, $(falloff), &quot;pointbased&quot;, $(useptc), \
								&quot;filename&quot;, $(ptcfile), \
								&quot;maxsolidangle&quot;, $(maxsolidang), \
								&quot;clamp&quot;, $(clamp), \
								&quot;environmentcolor&quot;, $(Envcolor), \
								&quot;environmentdir&quot;, $(Envdirection)		
	#elif RENDERER == air
	#define SHADEOP_ARGUMENTS	&quot;bias&quot;, $(bias), &quot;label&quot;, $(label), \
								&quot;maxdist&quot;, $(maxdist), \
								&quot;maxerror&quot;, $(maxerror), \
								&quot;maxpixeldist&quot;, $(maxpixeldist), \
								&quot;samples&quot;, $(samples), &quot;subset&quot;, $(subset)
	#elif RENDERER == aqsis
	#define SHADEOP_ARGUMENTS	&quot;blur&quot;, $(blur), &quot;bias&quot;, $(bias)
	#else /* entropy, bmrt, renderdotc? */
	#endif /* RENDERER */

	/* different order of arguments */
	#if RENDERER == _3delight || RENDERER == pixie || RENDERER == prman
		aov_occlusion += occlusion(	$(P), $(direction), $(samples),
									SHADEOP_ARGUMENTS );
		$(Occlusion) = 1 - aov_occlusion;
	#elif RENDERER == air /* shadow map based, unless map = &quot;raytrace&quot; */
		aov_occlusion += occlusion(	$(occlmap), $(P), $(direction),
									$(angle), SHADEOP_ARGUMENTS );
		$(Occlusion) = 1 - aov_occlusion;
	#elif RENDERER == aqsis /* shadow map based occlusion */
		aov_occlusion += occlusion(	$(occlmap), $(P), $(direction),
									$(samples), SHADEOP_ARGUMENTS );
		$(Occlusion) = 1 - aov_occlusion;
	#else /* entropy, bmrt, renderdotc? */
		$(Occlusion) = 0;		
	#endif /* RENDERER */
	
																												</rsl_code>
			<rsl_include/>
			<usage>This function returns the ambient occlusion, and optionally environment color, environment direction and indirect lighting. This function&apos;s arguments vary with each renderer&apos;s implementation, so make sure to consult your renderer&apos;s documentation. This block provided the following arguments: &quot;coneangle&quot;, defaults to PI/2; &quot;distribution&quot;, can be &quot;cosine&quot; or &quot;uniform&quot;, defaults to &quot;cosine&quot;. This function can use an optional environment map to use when rays don&apos;t hit the geometry, and can also return the environment direction vector, the average of the unoccluded direction. Note that you can use either the surface normal, or the reflection vector, for the &quot;indir&quot; variable, in which case the function will output ambient occlusion or reflection occlusion respectively. You can also use point-based occlusion, or Aqsis&apos;s implementation which uses multiple shadow maps. Note that this function varies considerably from implementation to implementation, so please consult your renderer&apos;s documentation for details. The occlusion value is passed to aov_occlusion AOV preset, as occlusion, not 1 - occlusion.																											</usage>
		</block>
		<block id="OrenNayar" position_x="4" position_y="1" author="rconstruct">
			<input name="Cdiff" type="color" storage="varying" value="color(.5)" description="Diffuse color">
				<connection parent="Spline" output="value"/>
			</input>
			<input name="Kd" type="float" storage="varying" value=".8" description="Diffuse light coefficient"/>
			<input name="roughness" type="float" storage="varying" value="1" description="roughness"/>
			<input name="qualitative" type="float" storage="uniform" value="1" description="Toggle qualitative or full model"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Direction of viewer"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
	#define use_qualitative_$(qualitative)
		aov_surfacecolor = $(Cdiff);
	
	#ifdef use_qualitative_1
		/* Air&apos;s diffuse can take a roughness parameter, in which */
		/* case behaves as the Oren-Nayar (qualitative?) model */
		#if RENDERER == air
			aov_diffuse = $(Kd) * diffuse( $(N), $(roughness) );
		#else
			aov_diffuse = $(Kd) * OrenNayar(	$(roughness), $(N), $(I),
												$(category) );

        #if RENDERER == _3delight

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            if ($(blockname)_gi_light != null)
            {
                color gi = $(blockname)_gi_light-&gt;computeGI(
                    P,
                    $(N),
                    $(I),
                    $(roughness), 
                    $(Cdiff));
                
                aov_indirectdiffuse = gi;
            }

        #endif
        
		#endif /* RENDERER */

        $(Ci) = aov_surfacecolor * (aov_diffuse + aov_indirectdiffuse);
	#else
		aov_diffuse = $(Kd) * LG_OrenNayar( $(Cdiff), $(roughness), $(N),
												$(I), $(category) );

        #if RENDERER == _3delight

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            if ($(blockname)_gi_light != null)
            {
                color gi = $(blockname)_gi_light-&gt;computeGI(
                    P,
                    $(N),
                    $(I),
                    $(roughness), 
                    $(Cdiff));
                
                aov_indirectdiffuse = gi;
            }

        #endif

		$(Ci) = aov_diffuse + aov_surfacecolor * aov_indirectdiffuse;

	#endif /* use_qualitative_$(qualitative) */
	#undef use_qualitative_$(qualitative)
	
				</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h			</rsl_include>
			<usage>Oren-Nayar diffuse term. This block has both the &quot;qualitative&quot; model based on Szymon Rusinkiewicz&apos;s implementation, and the full model with inter-reflections, based on Larry Gritz&apos;s implementation, depending on the content of the qualitative variable in the block. The roughness parameter controls the standard deviation of angle orientations of the surface grooves, so when roughness = 0, the term is Lambertian. The diffuse color value is passed to the aov_surfacecolor, and the diffuse value to the aov_diffuse AOV presets, only for the qualitative model (see the header for the C3 coefficient and L1 and L2 variables). The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.			</usage>
		</block>
		<block id="OrenNayar_2" position_x="4" position_y="4" author="rconstruct">
			<input name="Cdiff" type="color" storage="varying" value="color(.5)" description="Diffuse color">
				<connection parent="Mix_4" output="value"/>
			</input>
			<input name="Kd" type="float" storage="varying" value="0.8" description="Diffuse light coefficient"/>
			<input name="roughness" type="float" storage="varying" value="0.25" description="roughness"/>
			<input name="qualitative" type="float" storage="uniform" value="1" description="Toggle qualitative or full model"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Direction of viewer"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
	#define use_qualitative_$(qualitative)
		aov_surfacecolor = $(Cdiff);
	
	#ifdef use_qualitative_1
		/* Air&apos;s diffuse can take a roughness parameter, in which */
		/* case behaves as the Oren-Nayar (qualitative?) model */
		#if RENDERER == air
			aov_diffuse = $(Kd) * diffuse( $(N), $(roughness) );
		#else
			aov_diffuse = $(Kd) * OrenNayar(	$(roughness), $(N), $(I),
												$(category) );

        #if RENDERER == _3delight

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            if ($(blockname)_gi_light != null)
            {
                color gi = $(blockname)_gi_light-&gt;computeGI(
                    P,
                    $(N),
                    $(I),
                    $(roughness), 
                    $(Cdiff));
                
                aov_indirectdiffuse = gi;
            }

        #endif
        
		#endif /* RENDERER */

        $(Ci) = aov_surfacecolor * (aov_diffuse + aov_indirectdiffuse);
	#else
		aov_diffuse = $(Kd) * LG_OrenNayar( $(Cdiff), $(roughness), $(N),
												$(I), $(category) );

        #if RENDERER == _3delight

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            if ($(blockname)_gi_light != null)
            {
                color gi = $(blockname)_gi_light-&gt;computeGI(
                    P,
                    $(N),
                    $(I),
                    $(roughness), 
                    $(Cdiff));
                
                aov_indirectdiffuse = gi;
            }

        #endif

		$(Ci) = aov_diffuse + aov_surfacecolor * aov_indirectdiffuse;

	#endif /* use_qualitative_$(qualitative) */
	#undef use_qualitative_$(qualitative)
	
				</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h			</rsl_include>
			<usage>Oren-Nayar diffuse term. This block has both the &quot;qualitative&quot; model based on Szymon Rusinkiewicz&apos;s implementation, and the full model with inter-reflections, based on Larry Gritz&apos;s implementation, depending on the content of the qualitative variable in the block. The roughness parameter controls the standard deviation of angle orientations of the surface grooves, so when roughness = 0, the term is Lambertian. The diffuse color value is passed to the aov_surfacecolor, and the diffuse value to the aov_diffuse AOV presets, only for the qualitative model (see the header for the C3 coefficient and L1 and L2 variables). The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.			</usage>
		</block>
		<block id="OrenNayar_3" position_x="4" position_y="-9" author="rconstruct">
			<input name="Cdiff" type="color" storage="varying" value="color(.5)" description="Diffuse color">
				<connection parent="Spline_2" output="value"/>
			</input>
			<input name="Kd" type="float" storage="varying" value=".75" description="Diffuse light coefficient"/>
			<input name="roughness" type="float" storage="varying" value="1" description="roughness"/>
			<input name="qualitative" type="float" storage="uniform" value="1" description="Toggle qualitative or full model"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Direction of viewer"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
	#define use_qualitative_$(qualitative)
		aov_surfacecolor = $(Cdiff);
	
	#ifdef use_qualitative_1
		/* Air&apos;s diffuse can take a roughness parameter, in which */
		/* case behaves as the Oren-Nayar (qualitative?) model */
		#if RENDERER == air
			aov_diffuse = $(Kd) * diffuse( $(N), $(roughness) );
		#else
			aov_diffuse = $(Kd) * OrenNayar(	$(roughness), $(N), $(I),
												$(category) );

        #if RENDERER == _3delight

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            if ($(blockname)_gi_light != null)
            {
                color gi = $(blockname)_gi_light-&gt;computeGI(
                    P,
                    $(N),
                    $(I),
                    $(roughness), 
                    $(Cdiff));
                
                aov_indirectdiffuse = gi;
            }

        #endif
        
		#endif /* RENDERER */

        $(Ci) = aov_surfacecolor * (aov_diffuse + aov_indirectdiffuse);
	#else
		aov_diffuse = $(Kd) * LG_OrenNayar( $(Cdiff), $(roughness), $(N),
												$(I), $(category) );

        #if RENDERER == _3delight

            shader $(blockname)_gi_light = getshader(&quot;gi_light&quot;);

            if ($(blockname)_gi_light != null)
            {
                color gi = $(blockname)_gi_light-&gt;computeGI(
                    P,
                    $(N),
                    $(I),
                    $(roughness), 
                    $(Cdiff));
                
                aov_indirectdiffuse = gi;
            }

        #endif

		$(Ci) = aov_diffuse + aov_surfacecolor * aov_indirectdiffuse;

	#endif /* use_qualitative_$(qualitative) */
	#undef use_qualitative_$(qualitative)
	
				</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h			</rsl_include>
			<usage>Oren-Nayar diffuse term. This block has both the &quot;qualitative&quot; model based on Szymon Rusinkiewicz&apos;s implementation, and the full model with inter-reflections, based on Larry Gritz&apos;s implementation, depending on the content of the qualitative variable in the block. The roughness parameter controls the standard deviation of angle orientations of the surface grooves, so when roughness = 0, the term is Lambertian. The diffuse color value is passed to the aov_surfacecolor, and the diffuse value to the aov_diffuse AOV presets, only for the qualitative model (see the header for the C3 coefficient and L1 and L2 variables). The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.			</usage>
		</block>
		<block id="PatineGreen" position_x="-13" position_y="5" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .58, .93, .76)" description="Input" type_parent="value"/>
			<output name="value" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(value) = $(in);
																																		</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																																	</usage>
		</block>
		<block id="Ridged3D" position_x="-17" position_y="-1" author="rconstruct">
			<input name="P" type="point" storage="varying" value="P" description="point to sample fractal at">
				<connection parent="Transform" output="Pout"/>
			</input>
			<input name="filterwidth" type="float" storage="varying" value="0" description="Filter width for antialiasing">
				<connection parent="FWidth" output="filterwidth"/>
			</input>
			<input name="octaves" type="float" storage="uniform" value="8" description="Maximum octaves of noise"/>
			<input name="lacunarity" type="float" storage="varying" value="2" description="Gap between successive frequencies"/>
			<input name="gain" type="float" storage="varying" value="-0.7" description="Controls the contrast of the fractal"/>
			<input name="offset" type="float" storage="varying" value="1" description="Controls the multifractality"/>
			<input name="amplitude" type="float" storage="varying" value="1" description="Amplitude of fractal"/>
			<output name="value" type="float" storage="varying" description="fractal value at p"/>
			<rsl_code>
	#define $(blockname)_$(value:type)
	#ifdef $(blockname)_float
		$(value) = $(amplitude) * Ridged( $(P), $(filterwidth), $(octaves),
						$(lacunarity), $(offset), $(gain) );
	#else
		$(value) = $(amplitude) * $(value:type) (vector vRidged( $(P),
			$(filterwidth), $(octaves), $(lacunarity), $(offset), $(gain) ) );
	#endif
	#undef $(blockname)_$(value:type)
																																		</rsl_code>
			<rsl_include>rsl_shrimp_fractal.h																																	</rsl_include>
			<usage>Ken Musgrave&apos;s 3 dimensional Ridged Multifractal function. Note that offset can change the scale of the output drastically.																																	</usage>
		</block>
		<block id="Root block" position_x="15.3333333333333" position_y="-2" author="" root="RIB" AOV_preview="1">
			<rib_statements>#Hider &quot;raytrace&quot; &quot;int jitter&quot; [1]
Hider &quot;hidden&quot;

Option &quot;trace&quot; &quot;int maxdepth&quot; [10]
Option &quot;trace&quot; &quot;int diffuseraycache&quot; [1]

Attribute &quot;visibility&quot; &quot;int trace&quot; [1]
Attribute &quot;visibility&quot; &quot;int diffuse&quot; [1]
Attribute &quot;visibility&quot; &quot;int specular&quot; [1]
Attribute &quot;visibility&quot; &quot;int transmission&quot; [1]

Attribute &quot;shade&quot; &quot;string diffusehitmode&quot; [&quot;shader&quot;]
Attribute &quot;shade&quot; &quot;string specularhitmode&quot; [&quot;shader&quot;]
Attribute &quot;shade&quot; &quot;string transmissionhitmode&quot; [&quot;shader&quot;]

Attribute &quot;trace&quot; &quot;int diffusemaxdepth&quot; [4]
Attribute &quot;trace&quot; &quot;int specularmaxdepth&quot; [4]

Attribute &quot;light&quot; &quot;string shadows&quot; [&quot;on&quot;]

Attribute &quot;user&quot; &quot;int lightsamples&quot; [16] # arealights
Attribute &quot;user&quot; &quot;int gi_light_samples&quot; [36] # GI
			</rib_statements>
			<imager_statement/>
			<input name="Ci" type="color" storage="varying" shader_parameter="1" value="0" description="Incident ray colour">
				<connection parent="Mix_7" output="value"/>
			</input>
			<input name="Oi" type="color" storage="varying" shader_parameter="1" value="1" description="Incident ray opacity"/>
			<input name="P" type="point" storage="varying" shader_parameter="1" value="P" description="Displaced surface position"/>
			<input name="N" type="normal" storage="varying" shader_parameter="1" value="N" description="Displaced surface shading normal">
				<connection parent="Normalize_2" output="value"/>
			</input>
			<input name="Cl" type="color" storage="varying" shader_parameter="1" value="0" description="Outgoing light ray colour"/>
			<input name="Ol" type="color" storage="varying" shader_parameter="1" value="1" description="Outgoing light ray opacity"/>
			<input name="Cv" type="color" storage="varying" shader_parameter="1" value="0" description="Attenuated ray colour"/>
			<input name="Ov" type="color" storage="varying" shader_parameter="1" value="1" description="Attenuated ray opacity"/>
			<input name="Cm" type="color" storage="varying" shader_parameter="1" value="0" description="Output pixel colour"/>
			<input name="Om" type="color" storage="varying" shader_parameter="1" value="1" description="Output pixel opacity"/>
			<input name="AOV" type="color" storage="varying" shader_parameter="1" value="1" description="AOV preview output"/>
			<rsl_code/>
			<rsl_include/>
			<usage/>
		</block>
		<block id="SCurve" position_x="-18" position_y="2" author="rconstruct">
			<input name="P" type="point" storage="varying" value="P" description="Surface point"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal"/>
			<input name="minimum" type="float" storage="varying" value="-1" description="Minimum"/>
			<input name="maximum" type="float" storage="varying" value="1" description="Maximum"/>
			<input name="curvetype" type="string" storage="uniform" value="&quot;mean&quot;" description="Curvature type, see usage."/>
			<input name="greyscale" type="float" storage="uniform" value="0" description="Greyscale on/off"/>
			<output name="value" type="color" storage="varying" description="Curvature output"/>
			<rsl_code>
        $(value) = scurvature( $(curvetype), $(minimum), $(maximum),
								$(greyscale), $(N), $(P) );
																																		</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h																																	</rsl_include>
			<usage>Surface curvature block, based on Mario Marengo&apos;s VEX implementation of a surface curvature function, based on Andreas Baerentzen&apos;s paper: &quot;On the Computation of the Principal Curvatures of Regular Surfaces&quot;. Curvature types are &quot;gauss&quot;, for Gaussian curvature; &quot;mean&quot; as the mean of curvatures; &quot;amean&quot; as the absolute mean; &quot;minimum&quot; and &quot;maximum&quot; as the minimum and maximum of curvatures. If &quot;greyscale&quot; = 1.0, then it returns the curvature intensity in greyscale, else, it returns it in color.																																	</usage>
		</block>
		<block id="SetComp" position_x="11" position_y="3" author="rconstruct">
			<input name="x" type="float" storage="varying" value="0" description="X component">
				<connection parent="Clamp" output="value"/>
			</input>
			<input name="y" type="float" storage="varying" value="0" description="Y component">
				<connection parent="Clamp" output="value"/>
			</input>
			<input name="z" type="float" storage="varying" value="0" description="Z component">
				<connection parent="Clamp" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="Point, vector, or normal with the specified components"/>
			<rsl_code>
		$(value) = $(value:type) ( $(x), $(y), $(z) ); 
				</rsl_code>
			<rsl_include/>
			<usage>Sets the X, Y, and Z components of a point, vector, or normal.			</usage>
		</block>
		<block id="Spline" position_x="-7" position_y="-4" author="rconstruct">
			<input name="basis" type="string" storage="uniform" value="&quot;catmull-rom&quot;" description="The basis function"/>
			<input name="x" type="float" storage="varying" value="0" description="The value to test the spline at">
				<connection parent="Clamp" output="value"/>
			</input>
			<input name="point1" type="color" storage="varying" value="0" description="The 1st Control Point" type_parent="value"/>
			<input name="point2" type="color" storage="varying" value="0.2" description="The 2nd Control Point" type_parent="value">
				<connection parent="DarkDryGreen" output="value"/>
			</input>
			<input name="point3" type="color" storage="varying" value="0.8" description="The 3rd Control Point" type_parent="value">
				<connection parent="MediumDryGreen" output="value"/>
			</input>
			<input name="point4" type="color" storage="varying" multi="," value="1" description="The 4th or subsequent Control Points" type_parent="value">
				<connection parent="LightPatineGreen" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="The value of the spline at x"/>
			<rsl_code>
		$(value) = spline(	$(basis), $(x), $(point1), $(point2),
							$(point3), $(point4) );
																																		</rsl_code>
			<rsl_include/>
			<usage>Fits a spline into the control points passed, using the specified spline basis function. These can be of type &quot;catmull-rom&quot;, &quot;bezier&quot;, &quot;bspline&quot;, &quot;hermite&quot;, or &quot;linear&quot;. Defaults to &quot;catmull-rom&quot;. In 3delight, any spline type may be prefixed by &quot;solve&quot;, such as &quot;solvecatmull-rom&quot;, in which case this shadeop becomes a root solver and may be used as an invert function. The number of required data points is, for &quot;catmull-rom&quot;, 4 or higher; for &quot;bezier&quot;, 4n+3; for &quot;hermite&quot;, 4n+2; for &quot;bspline&quot; 4 or higher.																																	</usage>
		</block>
		<block id="Spline_2" position_x="-3" position_y="-9" author="rconstruct">
			<input name="basis" type="string" storage="uniform" value="&quot;hermite&quot;" description="The basis function"/>
			<input name="x" type="float" storage="varying" value="0" description="The value to test the spline at">
				<connection parent="Subtract_5" output="value"/>
			</input>
			<input name="point1" type="color" storage="varying" value="0" description="The 1st Control Point" type_parent="value">
				<connection parent="LightGreen_1" output="value"/>
			</input>
			<input name="point2" type="color" storage="varying" value="0.2" description="The 2nd Control Point" type_parent="value">
				<connection parent="LightGreen_2" output="value"/>
			</input>
			<input name="point3" type="color" storage="varying" value="0.8" description="The 3rd Control Point" type_parent="value">
				<connection parent="Medium_Green" output="value"/>
			</input>
			<input name="point4" type="color" storage="varying" multi="," value="1" description="The 4th or subsequent Control Points" type_parent="value">
				<connection parent="Dark_Green" output="value"/>
			</input>
			<input name="point4_2" type="color" storage="varying" multi_parent="point4" description="">
				<connection parent="Dark_Green_2" output="value"/>
			</input>
			<input name="point4_3" type="color" storage="varying" multi_parent="point4" description="">
				<connection parent="Dark_Green_2" output="value"/>
			</input>
			<output name="value" type="color" storage="varying" description="The value of the spline at x"/>
			<rsl_code>
		$(value) = spline(	$(basis), $(x), $(point1), $(point2),
							$(point3), $(point4) );
																			</rsl_code>
			<rsl_include/>
			<usage>Fits a spline into the control points passed, using the specified spline basis function. These can be of type &quot;catmull-rom&quot;, &quot;bezier&quot;, &quot;bspline&quot;, &quot;hermite&quot;, or &quot;linear&quot;. Defaults to &quot;catmull-rom&quot;. In 3delight, any spline type may be prefixed by &quot;solve&quot;, such as &quot;solvecatmull-rom&quot;, in which case this shadeop becomes a root solver and may be used as an invert function. The number of required data points is, for &quot;catmull-rom&quot;, 4 or higher; for &quot;bezier&quot;, 4n+3; for &quot;hermite&quot;, 4n+2; for &quot;bspline&quot; 4 or higher.																		</usage>
		</block>
		<block id="Subtract" position_x="-14" position_y="-1" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input"/>
			<input name="B" type="float" storage="varying" value="1" description="2nd input">
				<connection parent="Ridged3D" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(value) = $(A) - $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																																	</usage>
		</block>
		<block id="Subtract_2" position_x="-12" position_y="-4" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="value">
				<connection parent="GetCol" output="x"/>
			</input>
			<input name="B" type="float" storage="varying" value="1" description="2nd input" type_parent="value">
				<connection parent="Multiply_6" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(value) = $(A) - $(B);
																																		</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																																	</usage>
		</block>
		<block id="Subtract_3" position_x="-2" position_y="7" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input">
				<connection parent="Subtract" output="value"/>
			</input>
			<input name="B" type="float" storage="varying" value="1" description="2nd input">
				<connection parent="FSmoothStep_2" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(value) = $(A) - $(B);
																															</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																														</usage>
		</block>
		<block id="Subtract_4" position_x="-13" position_y="-8" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input"/>
			<input name="B" type="float" storage="varying" value="1" description="2nd input">
				<connection parent="GetCol" output="y"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(value) = $(A) - $(B);
																			</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																		</usage>
		</block>
		<block id="Subtract_5" position_x="-6" position_y="-9" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input"/>
			<input name="B" type="float" storage="varying" value="1" description="2nd input">
				<connection parent="Multiply_10" output="value"/>
			</input>
			<output name="value" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(value) = $(A) - $(B);
																			</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																		</usage>
		</block>
		<block id="Transform" position_x="-20" position_y="-2" author="rconstruct">
			<input name="P" type="point" storage="varying" value="P" description="Point, vector or normal to transform" type_parent="Pout">
				<connection parent="Multiply_2" output="value"/>
			</input>
			<input name="from_space" type="string" storage="uniform" value="&quot;current&quot;" description="The coordinate system to transform from"/>
			<input name="to_space" type="string" storage="uniform" value="&quot;shader&quot;" description="The coordinate system to transform into"/>
			<input name="Matrix" type="matrix" storage="varying" value="UND" description="Use this matrix instead of a predefined coordinate system"/>
			<output name="Pout" type="point" storage="varying" description="The transformed point, vector or normal"/>
			<rsl_code>
	#ifdef TRANSFORM_ARGUMENTS
	#undef TRANSFORM_ARGUMENTS
	#endif

	#define Matrix_$(Matrix)
	#ifdef Matrix_UND
		#define TRANSFORM_ARGUMENTS $(to_space)
	#else
		#define TRANSFORM_ARGUMENTS	$(Matrix)
	#endif /* Matrix_UND */

	#define $(blockname)_$(P:type) 1
	#ifdef $(blockname)_point
		$(Pout) = transform( $(from_space), TRANSFORM_ARGUMENTS , $(P) );
	#elif $(blockname)_vector
		$(Pout) = vtransform( $(from_space), TRANSFORM_ARGUMENTS , $(P) );
	#elif $(blockname)_normal
		$(Pout) = ntransform( $(from_space), TRANSFORM_ARGUMENTS , $(P) );
	#endif /* $(blockname)_$(P:type) */
	#undef $(blockname)_$(P:type)
	
	#undef Matrix_$(Matrix)
	#undef TRANSFORM_ARGUMENTS
																																		</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h																																	</rsl_include>
			<usage>A block for the &quot;transform&quot;, &quot;vtransform&quot; and &quot;ntransform&quot; functions, to transform the supplied point &quot;P&quot;, vector &quot;V&quot; or normal &quot;N&quot; respectively, from the coordinate system &quot;fromspace&quot; to the coordinate system &quot;tospace&quot;, with &quot;fromspace&quot; defaulting to &quot;current&quot;. Note that &quot;current&quot; is implementation specific. Predefined coordinate systems are: &quot;current&quot;, &quot;object&quot;, &quot;shader&quot;, &quot;world&quot;, &quot;camera&quot;, &quot;screen&quot;, &quot;raster&quot; and &quot;NDC&quot;. A transformation matrix might be given instead of a &quot;tospace&quot; coordinate system. User defined coordinate systems can also be refered to.																																	</usage>
		</block>
		<block id="VLfBm3D" position_x="-17" position_y="-5" author="rconstruct">
			<input name="P" type="point" storage="varying" value="P" description="Point to sample VLfBm at">
				<connection parent="Transform" output="Pout"/>
			</input>
			<input name="filterwidth" type="float" storage="varying" value="0" description="Filter width for antialiasing">
				<connection parent="FWidth" output="filterwidth"/>
			</input>
			<input name="octaves" type="float" storage="uniform" value="6" description="Maximum octaves of noise"/>
			<input name="lacunarity" type="float" storage="varying" value="4" description="Controls the smoothness of the VLfBm"/>
			<input name="scale" type="float" storage="varying" value=".5" description="VL scale"/>
			<input name="gain" type="float" storage="varying" value="0.5" description="Controls the contrast of the VLfBm"/>
			<input name="amplitude" type="float" storage="varying" value="1" description="Amplitude of VLfBm"/>
			<output name="value" type="float" storage="varying" description="VLfBm value at p"/>
			<rsl_code>
	#define $(blockname)_$(value:type)
	#ifdef $(blockname)_float
		$(value) = $(amplitude) * VLfBm( $(P), $(filterwidth), $(octaves),
					$(lacunarity), $(gain), $(scale) );
	#else
		$(value) = $(amplitude) * $(value:type) ( vector VLvfBm( $(P),
			$(filterwidth), $(octaves), $(lacunarity), $(gain), $(scale) ) );
	#endif
	#undef $(blockname)_$(value:type)
																																		</rsl_code>
			<rsl_include>rsl_shrimp_fractal.h																																	</rsl_include>
			<usage>3 dimensional Variable Lacunarity fractional Brownian motion is a sumation of noises at different frequencies, using VLNoise instead of signed noise. Note that the output is not clamped and may exceed +1 or -1.																																	</usage>
		</block>
		<block id="Ycomp" position_x="-22.6920157068063" position_y="-10" author="rconstruct">
			<input name="Vin" type="normal" storage="varying" value="point(1)" description="Point, vector or normal to retrieve component from">
				<connection parent="Normalize" output="value"/>
			</input>
			<output name="y" type="float" storage="varying" description="Y component"/>
			<rsl_code>
		$(y) = ycomp( $(Vin:type) $(Vin) );
																																		</rsl_code>
			<rsl_include/>
			<usage>Get the Y component of an point, vector or normal.																																	</usage>
		</block>
		<block id="p" position_x="-25" position_y="-1" author="rconstruct">
			<output name="P" type="point" storage="varying" description="Surface position"/>
			<rsl_code>
    $(P) = P;
    																																	</rsl_code>
			<rsl_include/>
			<usage>Note that in all shading contexts, &quot;P&quot; is the surface position, the only exception being volume shaders, in which &quot;P&quot; is the light ray origin. Also note that in imager shaders, &quot;P&quot; is the position of the pixel center in raster space, with the z coordinate being 0.																																	</usage>
		</block>
	</network>
</shrimp>
