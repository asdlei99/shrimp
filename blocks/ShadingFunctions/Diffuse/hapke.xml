<shrimp name="HapkeLunar" type="function" description="Hapke-Lommel-Seeliger lunar surface BRDF." author="rconstruct">
    <input name="Kd" description="Diffuse light coefficient" type="float" default="0.8"/>
	<input name="sden" description="Surface density" type="float" default="0.6"/>
    <input name="fscat" description="Forward scattering" type="float" default="0.1"/>
    <input name="refl" description="Reflectivity" type="float" default="1.0"/>
	<input name="N" description="Surface normal" type="normal vector" default="normalize(N)"/>
	<input name="I" description="Direction of viewer" type="vector" default="normalize(I)"/>
	<output name="Ci" description="Shaded color" type="color"/>
	<include>shadingmodels.h</include>
	<code>
        $(Ci) = $(Kd) * Hapke( $(sden), $(fscat), $(refl), $(N), $(I) );
	</code>
    <usage>Based on Szymon Rusinkiewicz's implementation of the Hapke-Lommel-Seeliger lunar surface BRDF, with Schonberg backstattering and Hapke retrodirective function. This is meant to be used as a diffuse term, and integrated in a network with ambient term (or if you wish, an specular term as well, altough originally wasn't meant to have any specular term at all.). Cs isn't included, nor is Os, make proper arrangements in your shading network to take Cs and Os into consideration where required.</usage>
</shrimp>
