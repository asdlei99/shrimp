// Automatically-generated typecasting operators for SDPGTK events
//
// This file was generated with 'awk -f sdpgtkeventscasting.awk sdpgtkevents.data > include/sdpgtkeventscasting.h'
// Do not edit this file by hand!  Alter sdpgtkeventscasting.awk or sdpgtkevents.data!


  class sdpGtkEventAdjustmentChanged; inline operator sdpGtkEventAdjustmentChanged*() { g_assert(m_EventSignal == "changed"); return (sdpGtkEventAdjustmentChanged*)this; }
  class sdpGtkEventAdjustmentValueChanged; inline operator sdpGtkEventAdjustmentValueChanged*() { g_assert(m_EventSignal == "value-changed"); return (sdpGtkEventAdjustmentValueChanged*)this; }
  class sdpGtkEventButtonClicked; inline operator sdpGtkEventButtonClicked*() { g_assert(m_EventSignal == "clicked"); return (sdpGtkEventButtonClicked*)this; }
  class sdpGtkEventButtonEnter; inline operator sdpGtkEventButtonEnter*() { g_assert(m_EventSignal == "enter"); return (sdpGtkEventButtonEnter*)this; }
  class sdpGtkEventButtonLeave; inline operator sdpGtkEventButtonLeave*() { g_assert(m_EventSignal == "leave"); return (sdpGtkEventButtonLeave*)this; }
  class sdpGtkEventButtonPressed; inline operator sdpGtkEventButtonPressed*() { g_assert(m_EventSignal == "pressed"); return (sdpGtkEventButtonPressed*)this; }
  class sdpGtkEventButtonReleased; inline operator sdpGtkEventButtonReleased*() { g_assert(m_EventSignal == "released"); return (sdpGtkEventButtonReleased*)this; }
  class sdpGtkEventCalendarDaySelected; inline operator sdpGtkEventCalendarDaySelected*() { g_assert(m_EventSignal == "day-selected"); return (sdpGtkEventCalendarDaySelected*)this; }
  class sdpGtkEventCalendarDaySelectedDoubleClick; inline operator sdpGtkEventCalendarDaySelectedDoubleClick*() { g_assert(m_EventSignal == "day-selected-gdouble-click"); return (sdpGtkEventCalendarDaySelectedDoubleClick*)this; }
  class sdpGtkEventCalendarMonthChanged; inline operator sdpGtkEventCalendarMonthChanged*() { g_assert(m_EventSignal == "month-changed"); return (sdpGtkEventCalendarMonthChanged*)this; }
  class sdpGtkEventCalendarNextMonth; inline operator sdpGtkEventCalendarNextMonth*() { g_assert(m_EventSignal == "next-month"); return (sdpGtkEventCalendarNextMonth*)this; }
  class sdpGtkEventCalendarNextYear; inline operator sdpGtkEventCalendarNextYear*() { g_assert(m_EventSignal == "next-year"); return (sdpGtkEventCalendarNextYear*)this; }
  class sdpGtkEventCalendarPrevMonth; inline operator sdpGtkEventCalendarPrevMonth*() { g_assert(m_EventSignal == "prev-month"); return (sdpGtkEventCalendarPrevMonth*)this; }
  class sdpGtkEventCalendarPrevYear; inline operator sdpGtkEventCalendarPrevYear*() { g_assert(m_EventSignal == "prev-year"); return (sdpGtkEventCalendarPrevYear*)this; }
  class sdpGtkEventCheckMenuItemToggled; inline operator sdpGtkEventCheckMenuItemToggled*() { g_assert(m_EventSignal == "toggled"); return (sdpGtkEventCheckMenuItemToggled*)this; }
  class sdpGtkEventCListAbortColumnResize; inline operator sdpGtkEventCListAbortColumnResize*() { g_assert(m_EventSignal == "abort-column-resize"); return (sdpGtkEventCListAbortColumnResize*)this; }
  class sdpGtkEventCListClickColumn; inline operator sdpGtkEventCListClickColumn*() { g_assert(m_EventSignal == "click-column"); return (sdpGtkEventCListClickColumn*)this; }
  class sdpGtkEventCListEndSelection; inline operator sdpGtkEventCListEndSelection*() { g_assert(m_EventSignal == "end-selection"); return (sdpGtkEventCListEndSelection*)this; }
  class sdpGtkEventCListExtendSelection; inline operator sdpGtkEventCListExtendSelection*() { g_assert(m_EventSignal == "extend-selection"); return (sdpGtkEventCListExtendSelection*)this; }
  class sdpGtkEventCListResizeColumn; inline operator sdpGtkEventCListResizeColumn*() { g_assert(m_EventSignal == "resize-column"); return (sdpGtkEventCListResizeColumn*)this; }
  class sdpGtkEventCListRowMove; inline operator sdpGtkEventCListRowMove*() { g_assert(m_EventSignal == "row-move"); return (sdpGtkEventCListRowMove*)this; }
  class sdpGtkEventCListScrollHorizontal; inline operator sdpGtkEventCListScrollHorizontal*() { g_assert(m_EventSignal == "scroll-horizontal"); return (sdpGtkEventCListScrollHorizontal*)this; }
  class sdpGtkEventCListScrollVertical; inline operator sdpGtkEventCListScrollVertical*() { g_assert(m_EventSignal == "scroll-vertical"); return (sdpGtkEventCListScrollVertical*)this; }
  class sdpGtkEventCListSelectAll; inline operator sdpGtkEventCListSelectAll*() { g_assert(m_EventSignal == "select-all"); return (sdpGtkEventCListSelectAll*)this; }
  class sdpGtkEventCListSelectRow; inline operator sdpGtkEventCListSelectRow*() { g_assert(m_EventSignal == "select-row"); return (sdpGtkEventCListSelectRow*)this; }
  class sdpGtkEventCListStartSelection; inline operator sdpGtkEventCListStartSelection*() { g_assert(m_EventSignal == "start-selection"); return (sdpGtkEventCListStartSelection*)this; }
  class sdpGtkEventCListToggleAddMode; inline operator sdpGtkEventCListToggleAddMode*() { g_assert(m_EventSignal == "toggle-add-mode"); return (sdpGtkEventCListToggleAddMode*)this; }
  class sdpGtkEventCListToggleFocusRow; inline operator sdpGtkEventCListToggleFocusRow*() { g_assert(m_EventSignal == "toggle-focus-row"); return (sdpGtkEventCListToggleFocusRow*)this; }
  class sdpGtkEventCListUndoSelection; inline operator sdpGtkEventCListUndoSelection*() { g_assert(m_EventSignal == "undo-selection"); return (sdpGtkEventCListUndoSelection*)this; }
  class sdpGtkEventCListUnselectAll; inline operator sdpGtkEventCListUnselectAll*() { g_assert(m_EventSignal == "unselect-all"); return (sdpGtkEventCListUnselectAll*)this; }
  class sdpGtkEventCListUnselectRow; inline operator sdpGtkEventCListUnselectRow*() { g_assert(m_EventSignal == "unselect-row"); return (sdpGtkEventCListUnselectRow*)this; }
  class sdpGtkEventColorSelectionColorChanged; inline operator sdpGtkEventColorSelectionColorChanged*() { g_assert(m_EventSignal == "color-changed"); return (sdpGtkEventColorSelectionColorChanged*)this; }
  class sdpGtkEventContainerAdd; inline operator sdpGtkEventContainerAdd*() { g_assert(m_EventSignal == "add"); return (sdpGtkEventContainerAdd*)this; }
  class sdpGtkEventContainerCheckResize; inline operator sdpGtkEventContainerCheckResize*() { g_assert(m_EventSignal == "check-resize"); return (sdpGtkEventContainerCheckResize*)this; }
  class sdpGtkEventContainerFocus; inline operator sdpGtkEventContainerFocus*() { g_assert(m_EventSignal == "focus"); return (sdpGtkEventContainerFocus*)this; }
  class sdpGtkEventContainerRemove; inline operator sdpGtkEventContainerRemove*() { g_assert(m_EventSignal == "remove"); return (sdpGtkEventContainerRemove*)this; }
  class sdpGtkEventContainerSetFocusChild; inline operator sdpGtkEventContainerSetFocusChild*() { g_assert(m_EventSignal == "set-focus-child"); return (sdpGtkEventContainerSetFocusChild*)this; }
  class sdpGtkEventCTreeChangeFocusRowExpansion; inline operator sdpGtkEventCTreeChangeFocusRowExpansion*() { g_assert(m_EventSignal == "change-focus-row-expansion"); return (sdpGtkEventCTreeChangeFocusRowExpansion*)this; }
  class sdpGtkEventCTreeTreeCollapse; inline operator sdpGtkEventCTreeTreeCollapse*() { g_assert(m_EventSignal == "tree-collapse"); return (sdpGtkEventCTreeTreeCollapse*)this; }
  class sdpGtkEventCTreeTreeExpand; inline operator sdpGtkEventCTreeTreeExpand*() { g_assert(m_EventSignal == "tree-expand"); return (sdpGtkEventCTreeTreeExpand*)this; }
  class sdpGtkEventCTreeTreeMove; inline operator sdpGtkEventCTreeTreeMove*() { g_assert(m_EventSignal == "tree-move"); return (sdpGtkEventCTreeTreeMove*)this; }
  class sdpGtkEventCTreeTreeSelectRow; inline operator sdpGtkEventCTreeTreeSelectRow*() { g_assert(m_EventSignal == "tree-select-row"); return (sdpGtkEventCTreeTreeSelectRow*)this; }
  class sdpGtkEventCTreeTreeUnselectRow; inline operator sdpGtkEventCTreeTreeUnselectRow*() { g_assert(m_EventSignal == "tree-unselect-row"); return (sdpGtkEventCTreeTreeUnselectRow*)this; }
  class sdpGtkEventCurveCurveTypeChanged; inline operator sdpGtkEventCurveCurveTypeChanged*() { g_assert(m_EventSignal == "curve-type-changed"); return (sdpGtkEventCurveCurveTypeChanged*)this; }
  class sdpGtkEventDataDisconnect; inline operator sdpGtkEventDataDisconnect*() { g_assert(m_EventSignal == "disconnect"); return (sdpGtkEventDataDisconnect*)this; }
  class sdpGtkEventEditableActivate; inline operator sdpGtkEventEditableActivate*() { g_assert(m_EventSignal == "activate"); return (sdpGtkEventEditableActivate*)this; }
  class sdpGtkEventEditableChanged; inline operator sdpGtkEventEditableChanged*() { g_assert(m_EventSignal == "changed"); return (sdpGtkEventEditableChanged*)this; }
  class sdpGtkEventEditableCopyClipboard; inline operator sdpGtkEventEditableCopyClipboard*() { g_assert(m_EventSignal == "copy-clipboard"); return (sdpGtkEventEditableCopyClipboard*)this; }
  class sdpGtkEventEditableCutClipboard; inline operator sdpGtkEventEditableCutClipboard*() { g_assert(m_EventSignal == "cut-clipboard"); return (sdpGtkEventEditableCutClipboard*)this; }
  class sdpGtkEventEditableDeleteText; inline operator sdpGtkEventEditableDeleteText*() { g_assert(m_EventSignal == "delete-text"); return (sdpGtkEventEditableDeleteText*)this; }
  class sdpGtkEventEditableInsertText; inline operator sdpGtkEventEditableInsertText*() { g_assert(m_EventSignal == "insert-text"); return (sdpGtkEventEditableInsertText*)this; }
  class sdpGtkEventEditableKillChar; inline operator sdpGtkEventEditableKillChar*() { g_assert(m_EventSignal == "kill-gchar"); return (sdpGtkEventEditableKillChar*)this; }
  class sdpGtkEventEditableKillLine; inline operator sdpGtkEventEditableKillLine*() { g_assert(m_EventSignal == "kill-line"); return (sdpGtkEventEditableKillLine*)this; }
  class sdpGtkEventEditableKillWord; inline operator sdpGtkEventEditableKillWord*() { g_assert(m_EventSignal == "kill-word"); return (sdpGtkEventEditableKillWord*)this; }
  class sdpGtkEventEditableMoveCursor; inline operator sdpGtkEventEditableMoveCursor*() { g_assert(m_EventSignal == "move-cursor"); return (sdpGtkEventEditableMoveCursor*)this; }
  class sdpGtkEventEditableMovePage; inline operator sdpGtkEventEditableMovePage*() { g_assert(m_EventSignal == "move-page"); return (sdpGtkEventEditableMovePage*)this; }
  class sdpGtkEventEditableMoveToColumn; inline operator sdpGtkEventEditableMoveToColumn*() { g_assert(m_EventSignal == "move-to-column"); return (sdpGtkEventEditableMoveToColumn*)this; }
  class sdpGtkEventEditableMoveToRow; inline operator sdpGtkEventEditableMoveToRow*() { g_assert(m_EventSignal == "move-to-row"); return (sdpGtkEventEditableMoveToRow*)this; }
  class sdpGtkEventEditableMoveWord; inline operator sdpGtkEventEditableMoveWord*() { g_assert(m_EventSignal == "move-word"); return (sdpGtkEventEditableMoveWord*)this; }
  class sdpGtkEventEditablePasteClipboard; inline operator sdpGtkEventEditablePasteClipboard*() { g_assert(m_EventSignal == "paste-clipboard"); return (sdpGtkEventEditablePasteClipboard*)this; }
  class sdpGtkEventEditableSetEditable; inline operator sdpGtkEventEditableSetEditable*() { g_assert(m_EventSignal == "set-editable"); return (sdpGtkEventEditableSetEditable*)this; }
  class sdpGtkEventHandleBoxChildAttached; inline operator sdpGtkEventHandleBoxChildAttached*() { g_assert(m_EventSignal == "child-attached"); return (sdpGtkEventHandleBoxChildAttached*)this; }
  class sdpGtkEventHandleBoxChildDetached; inline operator sdpGtkEventHandleBoxChildDetached*() { g_assert(m_EventSignal == "child-detached"); return (sdpGtkEventHandleBoxChildDetached*)this; }
  class sdpGtkEventInputDialogDisableDevice; inline operator sdpGtkEventInputDialogDisableDevice*() { g_assert(m_EventSignal == "disable-device"); return (sdpGtkEventInputDialogDisableDevice*)this; }
  class sdpGtkEventInputDialogEnableDevice; inline operator sdpGtkEventInputDialogEnableDevice*() { g_assert(m_EventSignal == "enable-device"); return (sdpGtkEventInputDialogEnableDevice*)this; }
  class sdpGtkEventItemDeselect; inline operator sdpGtkEventItemDeselect*() { g_assert(m_EventSignal == "deselect"); return (sdpGtkEventItemDeselect*)this; }
  class sdpGtkEventItemSelect; inline operator sdpGtkEventItemSelect*() { g_assert(m_EventSignal == "select"); return (sdpGtkEventItemSelect*)this; }
  class sdpGtkEventItemToggle; inline operator sdpGtkEventItemToggle*() { g_assert(m_EventSignal == "toggle"); return (sdpGtkEventItemToggle*)this; }
  class sdpGtkEventListItemEndSelection; inline operator sdpGtkEventListItemEndSelection*() { g_assert(m_EventSignal == "end-selection"); return (sdpGtkEventListItemEndSelection*)this; }
  class sdpGtkEventListItemExtendSelection; inline operator sdpGtkEventListItemExtendSelection*() { g_assert(m_EventSignal == "extend-selection"); return (sdpGtkEventListItemExtendSelection*)this; }
  class sdpGtkEventListItemScrollHorizontal; inline operator sdpGtkEventListItemScrollHorizontal*() { g_assert(m_EventSignal == "scroll-horizontal"); return (sdpGtkEventListItemScrollHorizontal*)this; }
  class sdpGtkEventListItemScrollVertical; inline operator sdpGtkEventListItemScrollVertical*() { g_assert(m_EventSignal == "scroll-vertical"); return (sdpGtkEventListItemScrollVertical*)this; }
  class sdpGtkEventListItemSelectAll; inline operator sdpGtkEventListItemSelectAll*() { g_assert(m_EventSignal == "select-all"); return (sdpGtkEventListItemSelectAll*)this; }
  class sdpGtkEventListItemStartSelection; inline operator sdpGtkEventListItemStartSelection*() { g_assert(m_EventSignal == "start-selection"); return (sdpGtkEventListItemStartSelection*)this; }
  class sdpGtkEventListItemToggleAddMode; inline operator sdpGtkEventListItemToggleAddMode*() { g_assert(m_EventSignal == "toggle-add-mode"); return (sdpGtkEventListItemToggleAddMode*)this; }
  class sdpGtkEventListItemToggleFocusRow; inline operator sdpGtkEventListItemToggleFocusRow*() { g_assert(m_EventSignal == "toggle-focus-row"); return (sdpGtkEventListItemToggleFocusRow*)this; }
  class sdpGtkEventListItemUndoSelection; inline operator sdpGtkEventListItemUndoSelection*() { g_assert(m_EventSignal == "undo-selection"); return (sdpGtkEventListItemUndoSelection*)this; }
  class sdpGtkEventListItemUnselectAll; inline operator sdpGtkEventListItemUnselectAll*() { g_assert(m_EventSignal == "unselect-all"); return (sdpGtkEventListItemUnselectAll*)this; }
  class sdpGtkEventListSelectChild; inline operator sdpGtkEventListSelectChild*() { g_assert(m_EventSignal == "select-child"); return (sdpGtkEventListSelectChild*)this; }
  class sdpGtkEventListSelectionChanged; inline operator sdpGtkEventListSelectionChanged*() { g_assert(m_EventSignal == "selection-changed"); return (sdpGtkEventListSelectionChanged*)this; }
  class sdpGtkEventListUnselectChild; inline operator sdpGtkEventListUnselectChild*() { g_assert(m_EventSignal == "unselect-child"); return (sdpGtkEventListUnselectChild*)this; }
  class sdpGtkEventMenuItemActivate; inline operator sdpGtkEventMenuItemActivate*() { g_assert(m_EventSignal == "activate"); return (sdpGtkEventMenuItemActivate*)this; }
  class sdpGtkEventMenuItemActivateItem; inline operator sdpGtkEventMenuItemActivateItem*() { g_assert(m_EventSignal == "activate-item"); return (sdpGtkEventMenuItemActivateItem*)this; }
  class sdpGtkEventMenuShellActivateCurrent; inline operator sdpGtkEventMenuShellActivateCurrent*() { g_assert(m_EventSignal == "activate-current"); return (sdpGtkEventMenuShellActivateCurrent*)this; }
  class sdpGtkEventMenuShellCancel; inline operator sdpGtkEventMenuShellCancel*() { g_assert(m_EventSignal == "cancel"); return (sdpGtkEventMenuShellCancel*)this; }
  class sdpGtkEventMenuShellDeactivate; inline operator sdpGtkEventMenuShellDeactivate*() { g_assert(m_EventSignal == "deactivate"); return (sdpGtkEventMenuShellDeactivate*)this; }
  class sdpGtkEventMenuShellMoveCurrent; inline operator sdpGtkEventMenuShellMoveCurrent*() { g_assert(m_EventSignal == "move-current"); return (sdpGtkEventMenuShellMoveCurrent*)this; }
  class sdpGtkEventMenuShellSelectionDone; inline operator sdpGtkEventMenuShellSelectionDone*() { g_assert(m_EventSignal == "selection-done"); return (sdpGtkEventMenuShellSelectionDone*)this; }
  class sdpGtkEventNotebookSwitchPage; inline operator sdpGtkEventNotebookSwitchPage*() { g_assert(m_EventSignal == "switch-page"); return (sdpGtkEventNotebookSwitchPage*)this; }
  class sdpGtkEventObjectDestroy; inline operator sdpGtkEventObjectDestroy*() { g_assert(m_EventSignal == "destroy"); return (sdpGtkEventObjectDestroy*)this; }
  class sdpGtkEventStatusbarTextPopped; inline operator sdpGtkEventStatusbarTextPopped*() { g_assert(m_EventSignal == "text-popped"); return (sdpGtkEventStatusbarTextPopped*)this; }
  class sdpGtkEventStatusbarTextPushed; inline operator sdpGtkEventStatusbarTextPushed*() { g_assert(m_EventSignal == "text-pushed"); return (sdpGtkEventStatusbarTextPushed*)this; }
  class sdpGtkEventTipsQueryStartQuery; inline operator sdpGtkEventTipsQueryStartQuery*() { g_assert(m_EventSignal == "start-query"); return (sdpGtkEventTipsQueryStartQuery*)this; }
  class sdpGtkEventTipsQueryStopQuery; inline operator sdpGtkEventTipsQueryStopQuery*() { g_assert(m_EventSignal == "stop-query"); return (sdpGtkEventTipsQueryStopQuery*)this; }
  class sdpGtkEventTipsQueryWidgetEntered; inline operator sdpGtkEventTipsQueryWidgetEntered*() { g_assert(m_EventSignal == "widget-entered"); return (sdpGtkEventTipsQueryWidgetEntered*)this; }
  class sdpGtkEventTipsQueryWidgetSelected; inline operator sdpGtkEventTipsQueryWidgetSelected*() { g_assert(m_EventSignal == "widget-selected"); return (sdpGtkEventTipsQueryWidgetSelected*)this; }
  class sdpGtkEventToggleButtonToggled; inline operator sdpGtkEventToggleButtonToggled*() { g_assert(m_EventSignal == "toggled"); return (sdpGtkEventToggleButtonToggled*)this; }
  class sdpGtkEventToolbarOrientationChanged; inline operator sdpGtkEventToolbarOrientationChanged*() { g_assert(m_EventSignal == "orientation-changed"); return (sdpGtkEventToolbarOrientationChanged*)this; }
  class sdpGtkEventToolbarStyleChanged; inline operator sdpGtkEventToolbarStyleChanged*() { g_assert(m_EventSignal == "style-changed"); return (sdpGtkEventToolbarStyleChanged*)this; }
  class sdpGtkEventTreeItemCollapse; inline operator sdpGtkEventTreeItemCollapse*() { g_assert(m_EventSignal == "collapse"); return (sdpGtkEventTreeItemCollapse*)this; }
  class sdpGtkEventTreeItemExpand; inline operator sdpGtkEventTreeItemExpand*() { g_assert(m_EventSignal == "expand"); return (sdpGtkEventTreeItemExpand*)this; }
  class sdpGtkEventTreeSelectChild; inline operator sdpGtkEventTreeSelectChild*() { g_assert(m_EventSignal == "select-child"); return (sdpGtkEventTreeSelectChild*)this; }
  class sdpGtkEventTreeSelectionChanged; inline operator sdpGtkEventTreeSelectionChanged*() { g_assert(m_EventSignal == "selection-changed"); return (sdpGtkEventTreeSelectionChanged*)this; }
  class sdpGtkEventTreeUnselectChild; inline operator sdpGtkEventTreeUnselectChild*() { g_assert(m_EventSignal == "unselect-child"); return (sdpGtkEventTreeUnselectChild*)this; }
  class sdpGtkEventWidgetAddAccelerator; inline operator sdpGtkEventWidgetAddAccelerator*() { g_assert(m_EventSignal == "add-accelerator"); return (sdpGtkEventWidgetAddAccelerator*)this; }
  class sdpGtkEventWidgetButtonPressEvent; inline operator sdpGtkEventWidgetButtonPressEvent*() { g_assert(m_EventSignal == "button-press-event"); return (sdpGtkEventWidgetButtonPressEvent*)this; }
  class sdpGtkEventWidgetButtonReleaseEvent; inline operator sdpGtkEventWidgetButtonReleaseEvent*() { g_assert(m_EventSignal == "button-release-event"); return (sdpGtkEventWidgetButtonReleaseEvent*)this; }
  class sdpGtkEventWidgetClientEvent; inline operator sdpGtkEventWidgetClientEvent*() { g_assert(m_EventSignal == "client-event"); return (sdpGtkEventWidgetClientEvent*)this; }
  class sdpGtkEventWidgetConfigureEvent; inline operator sdpGtkEventWidgetConfigureEvent*() { g_assert(m_EventSignal == "configure-event"); return (sdpGtkEventWidgetConfigureEvent*)this; }
  class sdpGtkEventWidgetDebugMsg; inline operator sdpGtkEventWidgetDebugMsg*() { g_assert(m_EventSignal == "debug-msg"); return (sdpGtkEventWidgetDebugMsg*)this; }
  class sdpGtkEventWidgetDeleteEvent; inline operator sdpGtkEventWidgetDeleteEvent*() { g_assert(m_EventSignal == "delete-event"); return (sdpGtkEventWidgetDeleteEvent*)this; }
  class sdpGtkEventWidgetDestroyEvent; inline operator sdpGtkEventWidgetDestroyEvent*() { g_assert(m_EventSignal == "destroy-event"); return (sdpGtkEventWidgetDestroyEvent*)this; }
  class sdpGtkEventWidgetDragBegin; inline operator sdpGtkEventWidgetDragBegin*() { g_assert(m_EventSignal == "drag-begin"); return (sdpGtkEventWidgetDragBegin*)this; }
  class sdpGtkEventWidgetDragDataDelete; inline operator sdpGtkEventWidgetDragDataDelete*() { g_assert(m_EventSignal == "drag-data-delete"); return (sdpGtkEventWidgetDragDataDelete*)this; }
  class sdpGtkEventWidgetDragDataGet; inline operator sdpGtkEventWidgetDragDataGet*() { g_assert(m_EventSignal == "drag-data-get"); return (sdpGtkEventWidgetDragDataGet*)this; }
  class sdpGtkEventWidgetDragDataReceived; inline operator sdpGtkEventWidgetDragDataReceived*() { g_assert(m_EventSignal == "drag-data-received"); return (sdpGtkEventWidgetDragDataReceived*)this; }
  class sdpGtkEventWidgetDragDrop; inline operator sdpGtkEventWidgetDragDrop*() { g_assert(m_EventSignal == "drag-drop"); return (sdpGtkEventWidgetDragDrop*)this; }
  class sdpGtkEventWidgetDragEnd; inline operator sdpGtkEventWidgetDragEnd*() { g_assert(m_EventSignal == "drag-end"); return (sdpGtkEventWidgetDragEnd*)this; }
  class sdpGtkEventWidgetDragLeave; inline operator sdpGtkEventWidgetDragLeave*() { g_assert(m_EventSignal == "drag-leave"); return (sdpGtkEventWidgetDragLeave*)this; }
  class sdpGtkEventWidgetDragMotion; inline operator sdpGtkEventWidgetDragMotion*() { g_assert(m_EventSignal == "drag-motion"); return (sdpGtkEventWidgetDragMotion*)this; }
  class sdpGtkEventWidgetDraw; inline operator sdpGtkEventWidgetDraw*() { g_assert(m_EventSignal == "draw"); return (sdpGtkEventWidgetDraw*)this; }
  class sdpGtkEventWidgetDrawDefault; inline operator sdpGtkEventWidgetDrawDefault*() { g_assert(m_EventSignal == "draw-default"); return (sdpGtkEventWidgetDrawDefault*)this; }
  class sdpGtkEventWidgetDrawFocus; inline operator sdpGtkEventWidgetDrawFocus*() { g_assert(m_EventSignal == "draw-focus"); return (sdpGtkEventWidgetDrawFocus*)this; }
  class sdpGtkEventWidgetEnterNotifyEvent; inline operator sdpGtkEventWidgetEnterNotifyEvent*() { g_assert(m_EventSignal == "enter-notify-event"); return (sdpGtkEventWidgetEnterNotifyEvent*)this; }
  class sdpGtkEventWidgetEvent; inline operator sdpGtkEventWidgetEvent*() { g_assert(m_EventSignal == "event"); return (sdpGtkEventWidgetEvent*)this; }
  class sdpGtkEventWidgetExposeEvent; inline operator sdpGtkEventWidgetExposeEvent*() { g_assert(m_EventSignal == "expose-event"); return (sdpGtkEventWidgetExposeEvent*)this; }
  class sdpGtkEventWidgetFocusInEvent; inline operator sdpGtkEventWidgetFocusInEvent*() { g_assert(m_EventSignal == "focus-in-event"); return (sdpGtkEventWidgetFocusInEvent*)this; }
  class sdpGtkEventWidgetFocusOutEvent; inline operator sdpGtkEventWidgetFocusOutEvent*() { g_assert(m_EventSignal == "focus-out-event"); return (sdpGtkEventWidgetFocusOutEvent*)this; }
  class sdpGtkEventWidgetHide; inline operator sdpGtkEventWidgetHide*() { g_assert(m_EventSignal == "hide"); return (sdpGtkEventWidgetHide*)this; }
  class sdpGtkEventWidgetKeyPressEvent; inline operator sdpGtkEventWidgetKeyPressEvent*() { g_assert(m_EventSignal == "key-press-event"); return (sdpGtkEventWidgetKeyPressEvent*)this; }
  class sdpGtkEventWidgetKeyReleaseEvent; inline operator sdpGtkEventWidgetKeyReleaseEvent*() { g_assert(m_EventSignal == "key-release-event"); return (sdpGtkEventWidgetKeyReleaseEvent*)this; }
  class sdpGtkEventWidgetLeaveNotifyEvent; inline operator sdpGtkEventWidgetLeaveNotifyEvent*() { g_assert(m_EventSignal == "leave-notify-event"); return (sdpGtkEventWidgetLeaveNotifyEvent*)this; }
  class sdpGtkEventWidgetMap; inline operator sdpGtkEventWidgetMap*() { g_assert(m_EventSignal == "map"); return (sdpGtkEventWidgetMap*)this; }
  class sdpGtkEventWidgetMapEvent; inline operator sdpGtkEventWidgetMapEvent*() { g_assert(m_EventSignal == "map-event"); return (sdpGtkEventWidgetMapEvent*)this; }
  class sdpGtkEventWidgetMotionNotifyEvent; inline operator sdpGtkEventWidgetMotionNotifyEvent*() { g_assert(m_EventSignal == "motion-notify-event"); return (sdpGtkEventWidgetMotionNotifyEvent*)this; }
  class sdpGtkEventWidgetNoExposeEvent; inline operator sdpGtkEventWidgetNoExposeEvent*() { g_assert(m_EventSignal == "no-expose-event"); return (sdpGtkEventWidgetNoExposeEvent*)this; }
  class sdpGtkEventWidgetParentSet; inline operator sdpGtkEventWidgetParentSet*() { g_assert(m_EventSignal == "parent-set"); return (sdpGtkEventWidgetParentSet*)this; }
  class sdpGtkEventWidgetPropertyNotifyEvent; inline operator sdpGtkEventWidgetPropertyNotifyEvent*() { g_assert(m_EventSignal == "property-notify-event"); return (sdpGtkEventWidgetPropertyNotifyEvent*)this; }
  class sdpGtkEventWidgetProximityInEvent; inline operator sdpGtkEventWidgetProximityInEvent*() { g_assert(m_EventSignal == "proximity-in-event"); return (sdpGtkEventWidgetProximityInEvent*)this; }
  class sdpGtkEventWidgetProximityOutEvent; inline operator sdpGtkEventWidgetProximityOutEvent*() { g_assert(m_EventSignal == "proximity-out-event"); return (sdpGtkEventWidgetProximityOutEvent*)this; }
  class sdpGtkEventWidgetRealize; inline operator sdpGtkEventWidgetRealize*() { g_assert(m_EventSignal == "realize"); return (sdpGtkEventWidgetRealize*)this; }
  class sdpGtkEventWidgetRemoveAccelerator; inline operator sdpGtkEventWidgetRemoveAccelerator*() { g_assert(m_EventSignal == "remove-accelerator"); return (sdpGtkEventWidgetRemoveAccelerator*)this; }
  class sdpGtkEventWidgetSelectionClearEvent; inline operator sdpGtkEventWidgetSelectionClearEvent*() { g_assert(m_EventSignal == "selection-clear-event"); return (sdpGtkEventWidgetSelectionClearEvent*)this; }
  class sdpGtkEventWidgetSelectionGet; inline operator sdpGtkEventWidgetSelectionGet*() { g_assert(m_EventSignal == "selection-get"); return (sdpGtkEventWidgetSelectionGet*)this; }
  class sdpGtkEventWidgetSelectionNotifyEvent; inline operator sdpGtkEventWidgetSelectionNotifyEvent*() { g_assert(m_EventSignal == "selection-notify-event"); return (sdpGtkEventWidgetSelectionNotifyEvent*)this; }
  class sdpGtkEventWidgetSelectionReceived; inline operator sdpGtkEventWidgetSelectionReceived*() { g_assert(m_EventSignal == "selection-received"); return (sdpGtkEventWidgetSelectionReceived*)this; }
  class sdpGtkEventWidgetSelectionRequestEvent; inline operator sdpGtkEventWidgetSelectionRequestEvent*() { g_assert(m_EventSignal == "selection-request-event"); return (sdpGtkEventWidgetSelectionRequestEvent*)this; }
  class sdpGtkEventWidgetShow; inline operator sdpGtkEventWidgetShow*() { g_assert(m_EventSignal == "show"); return (sdpGtkEventWidgetShow*)this; }
  class sdpGtkEventWidgetSizeAllocate; inline operator sdpGtkEventWidgetSizeAllocate*() { g_assert(m_EventSignal == "size-allocate"); return (sdpGtkEventWidgetSizeAllocate*)this; }
  class sdpGtkEventWidgetSizeRequest; inline operator sdpGtkEventWidgetSizeRequest*() { g_assert(m_EventSignal == "size-request"); return (sdpGtkEventWidgetSizeRequest*)this; }
  class sdpGtkEventWidgetStateChanged; inline operator sdpGtkEventWidgetStateChanged*() { g_assert(m_EventSignal == "state-changed"); return (sdpGtkEventWidgetStateChanged*)this; }
  class sdpGtkEventWidgetStyleSet; inline operator sdpGtkEventWidgetStyleSet*() { g_assert(m_EventSignal == "style-set"); return (sdpGtkEventWidgetStyleSet*)this; }
  class sdpGtkEventWidgetUnmap; inline operator sdpGtkEventWidgetUnmap*() { g_assert(m_EventSignal == "unmap"); return (sdpGtkEventWidgetUnmap*)this; }
  class sdpGtkEventWidgetUnmapEvent; inline operator sdpGtkEventWidgetUnmapEvent*() { g_assert(m_EventSignal == "unmap-event"); return (sdpGtkEventWidgetUnmapEvent*)this; }
  class sdpGtkEventWidgetUnrealize; inline operator sdpGtkEventWidgetUnrealize*() { g_assert(m_EventSignal == "unrealize"); return (sdpGtkEventWidgetUnrealize*)this; }
  class sdpGtkEventWidgetVisibilityNotifyEvent; inline operator sdpGtkEventWidgetVisibilityNotifyEvent*() { g_assert(m_EventSignal == "visibility-notify-event"); return (sdpGtkEventWidgetVisibilityNotifyEvent*)this; }
  class sdpGtkEventWindowSetFocus; inline operator sdpGtkEventWindowSetFocus*() { g_assert(m_EventSignal == "set-focus"); return (sdpGtkEventWindowSetFocus*)this; }
